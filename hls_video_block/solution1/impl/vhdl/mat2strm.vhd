-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mat2strm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IN_size_read : IN STD_LOGIC_VECTOR (20 downto 0);
    IN_data_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    IN_data_V_empty_n : IN STD_LOGIC;
    IN_data_V_read : OUT STD_LOGIC;
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of mat2strm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal OUT_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal OUT_V_data_V_1_vld_in : STD_LOGIC;
    signal OUT_V_data_V_1_vld_out : STD_LOGIC;
    signal OUT_V_data_V_1_ack_in : STD_LOGIC;
    signal OUT_V_data_V_1_ack_out : STD_LOGIC;
    signal OUT_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal OUT_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal OUT_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal OUT_V_data_V_1_sel : STD_LOGIC;
    signal OUT_V_data_V_1_load_A : STD_LOGIC;
    signal OUT_V_data_V_1_load_B : STD_LOGIC;
    signal OUT_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUT_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal OUT_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal OUT_V_keep_V_1_vld_in : STD_LOGIC;
    signal OUT_V_keep_V_1_vld_out : STD_LOGIC;
    signal OUT_V_keep_V_1_ack_in : STD_LOGIC;
    signal OUT_V_keep_V_1_ack_out : STD_LOGIC;
    signal OUT_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_keep_V_1_sel : STD_LOGIC;
    signal OUT_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUT_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal OUT_V_strb_V_1_vld_in : STD_LOGIC;
    signal OUT_V_strb_V_1_vld_out : STD_LOGIC;
    signal OUT_V_strb_V_1_ack_in : STD_LOGIC;
    signal OUT_V_strb_V_1_ack_out : STD_LOGIC;
    signal OUT_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_strb_V_1_sel : STD_LOGIC;
    signal OUT_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUT_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_V_user_V_1_vld_in : STD_LOGIC;
    signal OUT_V_user_V_1_vld_out : STD_LOGIC;
    signal OUT_V_user_V_1_ack_in : STD_LOGIC;
    signal OUT_V_user_V_1_ack_out : STD_LOGIC;
    signal OUT_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_user_V_1_sel : STD_LOGIC;
    signal OUT_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUT_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_V_last_V_1_vld_in : STD_LOGIC;
    signal OUT_V_last_V_1_vld_out : STD_LOGIC;
    signal OUT_V_last_V_1_ack_in : STD_LOGIC;
    signal OUT_V_last_V_1_ack_out : STD_LOGIC;
    signal OUT_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_last_V_1_sel : STD_LOGIC;
    signal OUT_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUT_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_V_id_V_1_vld_in : STD_LOGIC;
    signal OUT_V_id_V_1_vld_out : STD_LOGIC;
    signal OUT_V_id_V_1_ack_in : STD_LOGIC;
    signal OUT_V_id_V_1_ack_out : STD_LOGIC;
    signal OUT_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_id_V_1_sel : STD_LOGIC;
    signal OUT_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUT_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_V_dest_V_1_vld_in : STD_LOGIC;
    signal OUT_V_dest_V_1_vld_out : STD_LOGIC;
    signal OUT_V_dest_V_1_ack_in : STD_LOGIC;
    signal OUT_V_dest_V_1_ack_out : STD_LOGIC;
    signal OUT_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal OUT_V_dest_V_1_sel : STD_LOGIC;
    signal OUT_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal IN_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal i_2_fu_123_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_2_reg_142 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_data_V_fu_129_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_103 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_cast_fu_114_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    OUT_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_data_V_1_ack_out) and (ap_const_logic_1 = OUT_V_data_V_1_vld_out))) then 
                                        OUT_V_data_V_1_sel_rd <= not(OUT_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_data_V_1_ack_in) and (ap_const_logic_1 = OUT_V_data_V_1_vld_in))) then 
                                        OUT_V_data_V_1_sel_wr <= not(OUT_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_data_V_1_state) and (ap_const_logic_0 = OUT_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_data_V_1_state) and (ap_const_logic_0 = OUT_V_data_V_1_vld_in) and (ap_const_logic_1 = OUT_V_data_V_1_ack_out)))) then 
                    OUT_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_data_V_1_state) and (ap_const_logic_0 = OUT_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_data_V_1_state) and (ap_const_logic_0 = OUT_V_data_V_1_ack_out) and (ap_const_logic_1 = OUT_V_data_V_1_vld_in)))) then 
                    OUT_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_data_V_1_vld_in) and (ap_const_logic_1 = OUT_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_data_V_1_ack_out) and (ap_const_logic_1 = OUT_V_data_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_data_V_1_state)) or ((ap_const_lv2_1 = OUT_V_data_V_1_state) and (ap_const_logic_1 = OUT_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_data_V_1_state) and (ap_const_logic_1 = OUT_V_data_V_1_vld_in)))) then 
                    OUT_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUT_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUT_V_dest_V_1_vld_out))) then 
                                        OUT_V_dest_V_1_sel_rd <= not(OUT_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_dest_V_1_state) and (ap_const_logic_0 = OUT_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_dest_V_1_state) and (ap_const_logic_0 = OUT_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUT_V_dest_V_1_ack_out)))) then 
                    OUT_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_dest_V_1_state) and (ap_const_logic_0 = OUT_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_dest_V_1_state) and (ap_const_logic_0 = OUT_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUT_V_dest_V_1_vld_in)))) then 
                    OUT_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_dest_V_1_vld_in) and (ap_const_logic_1 = OUT_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_dest_V_1_ack_out) and (ap_const_logic_1 = OUT_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_dest_V_1_state)) or ((ap_const_lv2_1 = OUT_V_dest_V_1_state) and (ap_const_logic_1 = OUT_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_dest_V_1_state) and (ap_const_logic_1 = OUT_V_dest_V_1_vld_in)))) then 
                    OUT_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUT_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_id_V_1_ack_out) and (ap_const_logic_1 = OUT_V_id_V_1_vld_out))) then 
                                        OUT_V_id_V_1_sel_rd <= not(OUT_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_id_V_1_state) and (ap_const_logic_0 = OUT_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_id_V_1_state) and (ap_const_logic_0 = OUT_V_id_V_1_vld_in) and (ap_const_logic_1 = OUT_V_id_V_1_ack_out)))) then 
                    OUT_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_id_V_1_state) and (ap_const_logic_0 = OUT_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_id_V_1_state) and (ap_const_logic_0 = OUT_V_id_V_1_ack_out) and (ap_const_logic_1 = OUT_V_id_V_1_vld_in)))) then 
                    OUT_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_id_V_1_vld_in) and (ap_const_logic_1 = OUT_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_id_V_1_ack_out) and (ap_const_logic_1 = OUT_V_id_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_id_V_1_state)) or ((ap_const_lv2_1 = OUT_V_id_V_1_state) and (ap_const_logic_1 = OUT_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_id_V_1_state) and (ap_const_logic_1 = OUT_V_id_V_1_vld_in)))) then 
                    OUT_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUT_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUT_V_keep_V_1_vld_out))) then 
                                        OUT_V_keep_V_1_sel_rd <= not(OUT_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_keep_V_1_state) and (ap_const_logic_0 = OUT_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_keep_V_1_state) and (ap_const_logic_0 = OUT_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUT_V_keep_V_1_ack_out)))) then 
                    OUT_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_keep_V_1_state) and (ap_const_logic_0 = OUT_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_keep_V_1_state) and (ap_const_logic_0 = OUT_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUT_V_keep_V_1_vld_in)))) then 
                    OUT_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_keep_V_1_vld_in) and (ap_const_logic_1 = OUT_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_keep_V_1_ack_out) and (ap_const_logic_1 = OUT_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_keep_V_1_state)) or ((ap_const_lv2_1 = OUT_V_keep_V_1_state) and (ap_const_logic_1 = OUT_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_keep_V_1_state) and (ap_const_logic_1 = OUT_V_keep_V_1_vld_in)))) then 
                    OUT_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUT_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_last_V_1_ack_out) and (ap_const_logic_1 = OUT_V_last_V_1_vld_out))) then 
                                        OUT_V_last_V_1_sel_rd <= not(OUT_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_last_V_1_state) and (ap_const_logic_0 = OUT_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_last_V_1_state) and (ap_const_logic_0 = OUT_V_last_V_1_vld_in) and (ap_const_logic_1 = OUT_V_last_V_1_ack_out)))) then 
                    OUT_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_last_V_1_state) and (ap_const_logic_0 = OUT_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_last_V_1_state) and (ap_const_logic_0 = OUT_V_last_V_1_ack_out) and (ap_const_logic_1 = OUT_V_last_V_1_vld_in)))) then 
                    OUT_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_last_V_1_vld_in) and (ap_const_logic_1 = OUT_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_last_V_1_ack_out) and (ap_const_logic_1 = OUT_V_last_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_last_V_1_state)) or ((ap_const_lv2_1 = OUT_V_last_V_1_state) and (ap_const_logic_1 = OUT_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_last_V_1_state) and (ap_const_logic_1 = OUT_V_last_V_1_vld_in)))) then 
                    OUT_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUT_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUT_V_strb_V_1_vld_out))) then 
                                        OUT_V_strb_V_1_sel_rd <= not(OUT_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_strb_V_1_state) and (ap_const_logic_0 = OUT_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_strb_V_1_state) and (ap_const_logic_0 = OUT_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUT_V_strb_V_1_ack_out)))) then 
                    OUT_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_strb_V_1_state) and (ap_const_logic_0 = OUT_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_strb_V_1_state) and (ap_const_logic_0 = OUT_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUT_V_strb_V_1_vld_in)))) then 
                    OUT_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_strb_V_1_vld_in) and (ap_const_logic_1 = OUT_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_strb_V_1_ack_out) and (ap_const_logic_1 = OUT_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_strb_V_1_state)) or ((ap_const_lv2_1 = OUT_V_strb_V_1_state) and (ap_const_logic_1 = OUT_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_strb_V_1_state) and (ap_const_logic_1 = OUT_V_strb_V_1_vld_in)))) then 
                    OUT_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUT_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUT_V_user_V_1_ack_out) and (ap_const_logic_1 = OUT_V_user_V_1_vld_out))) then 
                                        OUT_V_user_V_1_sel_rd <= not(OUT_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUT_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                OUT_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUT_V_user_V_1_state) and (ap_const_logic_0 = OUT_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = OUT_V_user_V_1_state) and (ap_const_logic_0 = OUT_V_user_V_1_vld_in) and (ap_const_logic_1 = OUT_V_user_V_1_ack_out)))) then 
                    OUT_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUT_V_user_V_1_state) and (ap_const_logic_0 = OUT_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = OUT_V_user_V_1_state) and (ap_const_logic_0 = OUT_V_user_V_1_ack_out) and (ap_const_logic_1 = OUT_V_user_V_1_vld_in)))) then 
                    OUT_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUT_V_user_V_1_vld_in) and (ap_const_logic_1 = OUT_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = OUT_V_user_V_1_ack_out) and (ap_const_logic_1 = OUT_V_user_V_1_vld_in))) and (ap_const_lv2_3 = OUT_V_user_V_1_state)) or ((ap_const_lv2_1 = OUT_V_user_V_1_state) and (ap_const_logic_1 = OUT_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = OUT_V_user_V_1_state) and (ap_const_logic_1 = OUT_V_user_V_1_vld_in)))) then 
                    OUT_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    OUT_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = OUT_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_103 <= i_2_reg_142;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_103 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUT_V_data_V_1_load_A)) then
                OUT_V_data_V_1_payload_A <= tmp_data_V_fu_129_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUT_V_data_V_1_load_B)) then
                OUT_V_data_V_1_payload_B <= tmp_data_V_fu_129_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_2_reg_142 <= i_2_fu_123_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_CS_fsm_state3, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = OUT_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    IN_data_V_blk_n_assign_proc : process(IN_data_V_empty_n, ap_CS_fsm_state2, tmp_fu_118_p2)
    begin
        if (((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_data_V_blk_n <= IN_data_V_empty_n;
        else 
            IN_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    IN_data_V_read_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_data_V_read <= ap_const_logic_1;
        else 
            IN_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_STREAM_TDATA <= OUT_V_data_V_1_data_out;

    OUTPUT_STREAM_TDATA_blk_n_assign_proc : process(OUT_V_data_V_1_state, ap_CS_fsm_state2, tmp_fu_118_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            OUTPUT_STREAM_TDATA_blk_n <= OUT_V_data_V_1_state(1);
        else 
            OUTPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_STREAM_TDEST <= OUT_V_dest_V_1_data_out;
    OUTPUT_STREAM_TID <= OUT_V_id_V_1_data_out;
    OUTPUT_STREAM_TKEEP <= OUT_V_keep_V_1_data_out;
    OUTPUT_STREAM_TLAST <= OUT_V_last_V_1_data_out;
    OUTPUT_STREAM_TSTRB <= OUT_V_strb_V_1_data_out;
    OUTPUT_STREAM_TUSER <= OUT_V_user_V_1_data_out;
    OUTPUT_STREAM_TVALID <= OUT_V_dest_V_1_state(0);
    OUT_V_data_V_1_ack_in <= OUT_V_data_V_1_state(1);
    OUT_V_data_V_1_ack_out <= OUTPUT_STREAM_TREADY;

    OUT_V_data_V_1_data_out_assign_proc : process(OUT_V_data_V_1_payload_A, OUT_V_data_V_1_payload_B, OUT_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUT_V_data_V_1_sel)) then 
            OUT_V_data_V_1_data_out <= OUT_V_data_V_1_payload_B;
        else 
            OUT_V_data_V_1_data_out <= OUT_V_data_V_1_payload_A;
        end if; 
    end process;

    OUT_V_data_V_1_load_A <= (not(OUT_V_data_V_1_sel_wr) and OUT_V_data_V_1_state_cmp_full);
    OUT_V_data_V_1_load_B <= (OUT_V_data_V_1_state_cmp_full and OUT_V_data_V_1_sel_wr);
    OUT_V_data_V_1_sel <= OUT_V_data_V_1_sel_rd;
    OUT_V_data_V_1_state_cmp_full <= '0' when (OUT_V_data_V_1_state = ap_const_lv2_1) else '1';

    OUT_V_data_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_data_V_1_vld_out <= OUT_V_data_V_1_state(0);
    OUT_V_dest_V_1_ack_in <= OUT_V_dest_V_1_state(1);
    OUT_V_dest_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUT_V_dest_V_1_data_out <= ap_const_lv1_0;
    OUT_V_dest_V_1_sel <= OUT_V_dest_V_1_sel_rd;

    OUT_V_dest_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_dest_V_1_vld_out <= OUT_V_dest_V_1_state(0);
    OUT_V_id_V_1_ack_in <= OUT_V_id_V_1_state(1);
    OUT_V_id_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUT_V_id_V_1_data_out <= ap_const_lv1_0;
    OUT_V_id_V_1_sel <= OUT_V_id_V_1_sel_rd;

    OUT_V_id_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_id_V_1_vld_out <= OUT_V_id_V_1_state(0);
    OUT_V_keep_V_1_ack_in <= OUT_V_keep_V_1_state(1);
    OUT_V_keep_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUT_V_keep_V_1_data_out <= ap_const_lv3_0;
    OUT_V_keep_V_1_sel <= OUT_V_keep_V_1_sel_rd;

    OUT_V_keep_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_keep_V_1_vld_out <= OUT_V_keep_V_1_state(0);
    OUT_V_last_V_1_ack_in <= OUT_V_last_V_1_state(1);
    OUT_V_last_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUT_V_last_V_1_data_out <= ap_const_lv1_0;
    OUT_V_last_V_1_sel <= OUT_V_last_V_1_sel_rd;

    OUT_V_last_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_last_V_1_vld_out <= OUT_V_last_V_1_state(0);
    OUT_V_strb_V_1_ack_in <= OUT_V_strb_V_1_state(1);
    OUT_V_strb_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUT_V_strb_V_1_data_out <= ap_const_lv3_0;
    OUT_V_strb_V_1_sel <= OUT_V_strb_V_1_sel_rd;

    OUT_V_strb_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_strb_V_1_vld_out <= OUT_V_strb_V_1_state(0);
    OUT_V_user_V_1_ack_in <= OUT_V_user_V_1_state(1);
    OUT_V_user_V_1_ack_out <= OUTPUT_STREAM_TREADY;
    OUT_V_user_V_1_data_out <= ap_const_lv1_0;
    OUT_V_user_V_1_sel <= OUT_V_user_V_1_sel_rd;

    OUT_V_user_V_1_vld_in_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            OUT_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUT_V_user_V_1_vld_out <= OUT_V_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, tmp_fu_118_p2)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)));
    end process;


    ap_block_state2_io_assign_proc : process(OUT_V_data_V_1_ack_in, tmp_fu_118_p2)
    begin
                ap_block_state2_io <= ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_V_data_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_done_reg, IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(IN_data_V_empty_n, OUT_V_data_V_1_ack_in, OUT_V_keep_V_1_ack_in, OUT_V_strb_V_1_ack_in, OUT_V_user_V_1_ack_in, OUT_V_last_V_1_ack_in, OUT_V_id_V_1_ack_in, OUT_V_dest_V_1_ack_in, ap_CS_fsm_state2, tmp_fu_118_p2, ap_block_state2_io)
    begin
        if ((not(((ap_const_logic_0 = OUT_V_data_V_1_ack_in) or (ap_const_logic_0 = OUT_V_dest_V_1_ack_in) or (ap_const_logic_0 = OUT_V_id_V_1_ack_in) or (ap_const_logic_0 = OUT_V_last_V_1_ack_in) or (ap_const_logic_0 = OUT_V_user_V_1_ack_in) or (ap_const_logic_0 = OUT_V_strb_V_1_ack_in) or (ap_const_logic_0 = OUT_V_keep_V_1_ack_in) or (ap_const_boolean_1 = ap_block_state2_io) or ((tmp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_data_V_empty_n)))) and (tmp_fu_118_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_123_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv20_1));
    i_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_103),21));
        tmp_data_V_fu_129_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(IN_data_V_dout),24));

    tmp_fu_118_p2 <= "1" when (signed(i_cast_fu_114_p1) < signed(IN_size_read)) else "0";
end behav;
