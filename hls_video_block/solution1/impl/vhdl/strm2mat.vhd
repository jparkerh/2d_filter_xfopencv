-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity strm2mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUT_size_read : IN STD_LOGIC_VECTOR (20 downto 0);
    OUT_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUT_data_V_full_n : IN STD_LOGIC;
    OUT_data_V_write : OUT STD_LOGIC );
end;


architecture behav of strm2mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal IN_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal IN_V_data_V_0_vld_in : STD_LOGIC;
    signal IN_V_data_V_0_vld_out : STD_LOGIC;
    signal IN_V_data_V_0_ack_in : STD_LOGIC;
    signal IN_V_data_V_0_ack_out : STD_LOGIC;
    signal IN_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal IN_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal IN_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal IN_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal IN_V_data_V_0_sel : STD_LOGIC;
    signal IN_V_data_V_0_load_A : STD_LOGIC;
    signal IN_V_data_V_0_load_B : STD_LOGIC;
    signal IN_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal IN_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal IN_V_dest_V_0_vld_in : STD_LOGIC;
    signal IN_V_dest_V_0_ack_out : STD_LOGIC;
    signal IN_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OUT_data_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal i_1_fu_107_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal i_reg_87 : STD_LOGIC_VECTOR (19 downto 0);
    signal i_cast_fu_98_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    IN_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                IN_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = IN_V_data_V_0_ack_out) and (ap_const_logic_1 = IN_V_data_V_0_vld_out))) then 
                                        IN_V_data_V_0_sel_rd <= not(IN_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    IN_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                IN_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = IN_V_data_V_0_ack_in) and (ap_const_logic_1 = IN_V_data_V_0_vld_in))) then 
                                        IN_V_data_V_0_sel_wr <= not(IN_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    IN_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                IN_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = IN_V_data_V_0_state) and (ap_const_logic_0 = IN_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = IN_V_data_V_0_state) and (ap_const_logic_0 = IN_V_data_V_0_vld_in) and (ap_const_logic_1 = IN_V_data_V_0_ack_out)))) then 
                    IN_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = IN_V_data_V_0_state) and (ap_const_logic_0 = IN_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = IN_V_data_V_0_state) and (ap_const_logic_0 = IN_V_data_V_0_ack_out) and (ap_const_logic_1 = IN_V_data_V_0_vld_in)))) then 
                    IN_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = IN_V_data_V_0_vld_in) and (ap_const_logic_1 = IN_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = IN_V_data_V_0_ack_out) and (ap_const_logic_1 = IN_V_data_V_0_vld_in))) and (ap_const_lv2_3 = IN_V_data_V_0_state)) or ((ap_const_lv2_1 = IN_V_data_V_0_state) and (ap_const_logic_1 = IN_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = IN_V_data_V_0_state) and (ap_const_logic_1 = IN_V_data_V_0_vld_in)))) then 
                    IN_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    IN_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    IN_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                IN_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = IN_V_dest_V_0_state) and (ap_const_logic_0 = IN_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = IN_V_dest_V_0_state) and (ap_const_logic_0 = IN_V_dest_V_0_vld_in) and (ap_const_logic_1 = IN_V_dest_V_0_ack_out)))) then 
                    IN_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = IN_V_dest_V_0_state) and (ap_const_logic_0 = IN_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = IN_V_dest_V_0_state) and (ap_const_logic_0 = IN_V_dest_V_0_ack_out) and (ap_const_logic_1 = IN_V_dest_V_0_vld_in)))) then 
                    IN_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = IN_V_dest_V_0_vld_in) and (ap_const_logic_1 = IN_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = IN_V_dest_V_0_ack_out) and (ap_const_logic_1 = IN_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = IN_V_dest_V_0_state)) or ((ap_const_lv2_1 = IN_V_dest_V_0_state) and (ap_const_logic_1 = IN_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = IN_V_dest_V_0_state) and (ap_const_logic_1 = IN_V_dest_V_0_vld_in)))) then 
                    IN_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    IN_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_87 <= i_1_fu_107_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_87 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = IN_V_data_V_0_load_A)) then
                IN_V_data_V_0_payload_A <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = IN_V_data_V_0_load_B)) then
                IN_V_data_V_0_payload_B <= INPUT_STREAM_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, IN_V_data_V_0_vld_out, OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(IN_V_data_V_0_state, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if (((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            INPUT_STREAM_TDATA_blk_n <= IN_V_data_V_0_state(0);
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_STREAM_TREADY <= IN_V_dest_V_0_state(1);
    IN_V_data_V_0_ack_in <= IN_V_data_V_0_state(1);

    IN_V_data_V_0_ack_out_assign_proc : process(IN_V_data_V_0_vld_out, OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            IN_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    IN_V_data_V_0_data_out_assign_proc : process(IN_V_data_V_0_payload_A, IN_V_data_V_0_payload_B, IN_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = IN_V_data_V_0_sel)) then 
            IN_V_data_V_0_data_out <= IN_V_data_V_0_payload_B;
        else 
            IN_V_data_V_0_data_out <= IN_V_data_V_0_payload_A;
        end if; 
    end process;

    IN_V_data_V_0_load_A <= (not(IN_V_data_V_0_sel_wr) and IN_V_data_V_0_state_cmp_full);
    IN_V_data_V_0_load_B <= (IN_V_data_V_0_state_cmp_full and IN_V_data_V_0_sel_wr);
    IN_V_data_V_0_sel <= IN_V_data_V_0_sel_rd;
    IN_V_data_V_0_state_cmp_full <= '0' when (IN_V_data_V_0_state = ap_const_lv2_1) else '1';
    IN_V_data_V_0_vld_in <= INPUT_STREAM_TVALID;
    IN_V_data_V_0_vld_out <= IN_V_data_V_0_state(0);

    IN_V_dest_V_0_ack_out_assign_proc : process(IN_V_data_V_0_vld_out, OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IN_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            IN_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    IN_V_dest_V_0_vld_in <= INPUT_STREAM_TVALID;

    OUT_data_V_blk_n_assign_proc : process(OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if (((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_data_V_blk_n <= OUT_data_V_full_n;
        else 
            OUT_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUT_data_V_din <= IN_V_data_V_0_data_out;

    OUT_data_V_write_assign_proc : process(IN_V_data_V_0_vld_out, OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            OUT_data_V_write <= ap_const_logic_1;
        else 
            OUT_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(IN_V_data_V_0_vld_out, OUT_data_V_full_n, tmp_fu_102_p2)
    begin
                ap_block_state2 <= (((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, IN_V_data_V_0_vld_out, OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    i_1_fu_107_p2 <= std_logic_vector(unsigned(i_reg_87) + unsigned(ap_const_lv20_1));
    i_cast_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_87),21));

    internal_ap_ready_assign_proc : process(IN_V_data_V_0_vld_out, OUT_data_V_full_n, ap_CS_fsm_state2, tmp_fu_102_p2)
    begin
        if ((not((((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = OUT_data_V_full_n)) or ((tmp_fu_102_p2 = ap_const_lv1_1) and (ap_const_logic_0 = IN_V_data_V_0_vld_out)))) and (tmp_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_102_p2 <= "1" when (signed(i_cast_fu_98_p1) < signed(OUT_size_read)) else "0";
end behav;
