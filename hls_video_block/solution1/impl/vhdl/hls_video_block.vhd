-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_video_block is
port (
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC );
end;


architecture behav of hls_video_block is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_video_block,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.246000,HLS_SYN_LAT=2772814,HLS_SYN_TPT=1853774,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=783,HLS_SYN_LUT=1783,HLS_VERSION=2018_3}";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv21_E1000 : STD_LOGIC_VECTOR (20 downto 0) := "011100001000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal strm2mat_U0_ap_start : STD_LOGIC;
    signal strm2mat_U0_ap_done : STD_LOGIC;
    signal strm2mat_U0_ap_continue : STD_LOGIC;
    signal strm2mat_U0_ap_idle : STD_LOGIC;
    signal strm2mat_U0_ap_ready : STD_LOGIC;
    signal strm2mat_U0_start_out : STD_LOGIC;
    signal strm2mat_U0_start_write : STD_LOGIC;
    signal strm2mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal strm2mat_U0_OUT_data_V_din : STD_LOGIC_VECTOR (23 downto 0);
    signal strm2mat_U0_OUT_data_V_write : STD_LOGIC;
    signal rgb2gry_U0_ap_start : STD_LOGIC;
    signal rgb2gry_U0_ap_done : STD_LOGIC;
    signal rgb2gry_U0_ap_continue : STD_LOGIC;
    signal rgb2gry_U0_ap_idle : STD_LOGIC;
    signal rgb2gry_U0_ap_ready : STD_LOGIC;
    signal rgb2gry_U0_start_out : STD_LOGIC;
    signal rgb2gry_U0_start_write : STD_LOGIC;
    signal rgb2gry_U0_input_mat_data_V_read : STD_LOGIC;
    signal rgb2gry_U0_output_mat_data_V_din : STD_LOGIC_VECTOR (6 downto 0);
    signal rgb2gry_U0_output_mat_data_V_write : STD_LOGIC;
    signal hls_2DFilter_U0_ap_start : STD_LOGIC;
    signal hls_2DFilter_U0_ap_done : STD_LOGIC;
    signal hls_2DFilter_U0_ap_continue : STD_LOGIC;
    signal hls_2DFilter_U0_ap_idle : STD_LOGIC;
    signal hls_2DFilter_U0_ap_ready : STD_LOGIC;
    signal hls_2DFilter_U0_start_out : STD_LOGIC;
    signal hls_2DFilter_U0_start_write : STD_LOGIC;
    signal hls_2DFilter_U0_input_mat_data_V_read : STD_LOGIC;
    signal hls_2DFilter_U0_output_mat_data_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal hls_2DFilter_U0_output_mat_data_V_write : STD_LOGIC;
    signal gry2rgb_U0_ap_start : STD_LOGIC;
    signal gry2rgb_U0_ap_done : STD_LOGIC;
    signal gry2rgb_U0_ap_continue : STD_LOGIC;
    signal gry2rgb_U0_ap_idle : STD_LOGIC;
    signal gry2rgb_U0_ap_ready : STD_LOGIC;
    signal gry2rgb_U0_start_out : STD_LOGIC;
    signal gry2rgb_U0_start_write : STD_LOGIC;
    signal gry2rgb_U0_input_mat_data_V_read : STD_LOGIC;
    signal gry2rgb_U0_output_mat_data_V_din : STD_LOGIC_VECTOR (16 downto 0);
    signal gry2rgb_U0_output_mat_data_V_write : STD_LOGIC;
    signal mat2strm_U0_ap_start : STD_LOGIC;
    signal mat2strm_U0_ap_done : STD_LOGIC;
    signal mat2strm_U0_ap_continue : STD_LOGIC;
    signal mat2strm_U0_ap_idle : STD_LOGIC;
    signal mat2strm_U0_ap_ready : STD_LOGIC;
    signal mat2strm_U0_IN_data_V_read : STD_LOGIC;
    signal mat2strm_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal mat2strm_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal mat2strm_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal mat2strm_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal mat2strm_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2strm_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2strm_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal mat2strm_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal in_tmp_data_V_full_n : STD_LOGIC;
    signal in_tmp_data_V_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal in_tmp_data_V_empty_n : STD_LOGIC;
    signal im_1_data_V_full_n : STD_LOGIC;
    signal im_1_data_V_dout : STD_LOGIC_VECTOR (6 downto 0);
    signal im_1_data_V_empty_n : STD_LOGIC;
    signal im_2_data_V_full_n : STD_LOGIC;
    signal im_2_data_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal im_2_data_V_empty_n : STD_LOGIC;
    signal out_tmp_data_V_full_n : STD_LOGIC;
    signal out_tmp_data_V_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal out_tmp_data_V_empty_n : STD_LOGIC;
    signal start_for_rgb2gry_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gry_U0_full_n : STD_LOGIC;
    signal start_for_rgb2gry_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_rgb2gry_U0_empty_n : STD_LOGIC;
    signal start_for_hls_2DFilter_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_2DFilter_U0_full_n : STD_LOGIC;
    signal start_for_hls_2DFilter_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hls_2DFilter_U0_empty_n : STD_LOGIC;
    signal start_for_gry2rgb_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gry2rgb_U0_full_n : STD_LOGIC;
    signal start_for_gry2rgb_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gry2rgb_U0_empty_n : STD_LOGIC;
    signal start_for_mat2strm_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mat2strm_U0_full_n : STD_LOGIC;
    signal start_for_mat2strm_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mat2strm_U0_empty_n : STD_LOGIC;
    signal mat2strm_U0_start_full_n : STD_LOGIC;
    signal mat2strm_U0_start_write : STD_LOGIC;

    component strm2mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        OUT_size_read : IN STD_LOGIC_VECTOR (20 downto 0);
        OUT_data_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUT_data_V_full_n : IN STD_LOGIC;
        OUT_data_V_write : OUT STD_LOGIC );
    end component;


    component rgb2gry IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_mat_data_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        input_mat_data_V_empty_n : IN STD_LOGIC;
        input_mat_data_V_read : OUT STD_LOGIC;
        output_mat_data_V_din : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_mat_data_V_full_n : IN STD_LOGIC;
        output_mat_data_V_write : OUT STD_LOGIC );
    end component;


    component hls_2DFilter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_mat_data_V_dout : IN STD_LOGIC_VECTOR (6 downto 0);
        input_mat_data_V_empty_n : IN STD_LOGIC;
        input_mat_data_V_read : OUT STD_LOGIC;
        output_mat_data_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_mat_data_V_full_n : IN STD_LOGIC;
        output_mat_data_V_write : OUT STD_LOGIC );
    end component;


    component gry2rgb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_mat_data_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        input_mat_data_V_empty_n : IN STD_LOGIC;
        input_mat_data_V_read : OUT STD_LOGIC;
        output_mat_data_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        output_mat_data_V_full_n : IN STD_LOGIC;
        output_mat_data_V_write : OUT STD_LOGIC );
    end component;


    component mat2strm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        IN_size_read : IN STD_LOGIC_VECTOR (20 downto 0);
        IN_data_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        IN_data_V_empty_n : IN STD_LOGIC;
        IN_data_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w24_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w7_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (6 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w17_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (16 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (16 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_rgb2gryg8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hls_2DFhbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gry2rgbibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_mat2strjbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    strm2mat_U0 : component strm2mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => strm2mat_U0_ap_start,
        start_full_n => start_for_rgb2gry_U0_full_n,
        ap_done => strm2mat_U0_ap_done,
        ap_continue => strm2mat_U0_ap_continue,
        ap_idle => strm2mat_U0_ap_idle,
        ap_ready => strm2mat_U0_ap_ready,
        start_out => strm2mat_U0_start_out,
        start_write => strm2mat_U0_start_write,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => strm2mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        OUT_size_read => ap_const_lv21_E1000,
        OUT_data_V_din => strm2mat_U0_OUT_data_V_din,
        OUT_data_V_full_n => in_tmp_data_V_full_n,
        OUT_data_V_write => strm2mat_U0_OUT_data_V_write);

    rgb2gry_U0 : component rgb2gry
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rgb2gry_U0_ap_start,
        start_full_n => start_for_hls_2DFilter_U0_full_n,
        ap_done => rgb2gry_U0_ap_done,
        ap_continue => rgb2gry_U0_ap_continue,
        ap_idle => rgb2gry_U0_ap_idle,
        ap_ready => rgb2gry_U0_ap_ready,
        start_out => rgb2gry_U0_start_out,
        start_write => rgb2gry_U0_start_write,
        input_mat_data_V_dout => in_tmp_data_V_dout,
        input_mat_data_V_empty_n => in_tmp_data_V_empty_n,
        input_mat_data_V_read => rgb2gry_U0_input_mat_data_V_read,
        output_mat_data_V_din => rgb2gry_U0_output_mat_data_V_din,
        output_mat_data_V_full_n => im_1_data_V_full_n,
        output_mat_data_V_write => rgb2gry_U0_output_mat_data_V_write);

    hls_2DFilter_U0 : component hls_2DFilter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hls_2DFilter_U0_ap_start,
        start_full_n => start_for_gry2rgb_U0_full_n,
        ap_done => hls_2DFilter_U0_ap_done,
        ap_continue => hls_2DFilter_U0_ap_continue,
        ap_idle => hls_2DFilter_U0_ap_idle,
        ap_ready => hls_2DFilter_U0_ap_ready,
        start_out => hls_2DFilter_U0_start_out,
        start_write => hls_2DFilter_U0_start_write,
        input_mat_data_V_dout => im_1_data_V_dout,
        input_mat_data_V_empty_n => im_1_data_V_empty_n,
        input_mat_data_V_read => hls_2DFilter_U0_input_mat_data_V_read,
        output_mat_data_V_din => hls_2DFilter_U0_output_mat_data_V_din,
        output_mat_data_V_full_n => im_2_data_V_full_n,
        output_mat_data_V_write => hls_2DFilter_U0_output_mat_data_V_write);

    gry2rgb_U0 : component gry2rgb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gry2rgb_U0_ap_start,
        start_full_n => start_for_mat2strm_U0_full_n,
        ap_done => gry2rgb_U0_ap_done,
        ap_continue => gry2rgb_U0_ap_continue,
        ap_idle => gry2rgb_U0_ap_idle,
        ap_ready => gry2rgb_U0_ap_ready,
        start_out => gry2rgb_U0_start_out,
        start_write => gry2rgb_U0_start_write,
        input_mat_data_V_dout => im_2_data_V_dout,
        input_mat_data_V_empty_n => im_2_data_V_empty_n,
        input_mat_data_V_read => gry2rgb_U0_input_mat_data_V_read,
        output_mat_data_V_din => gry2rgb_U0_output_mat_data_V_din,
        output_mat_data_V_full_n => out_tmp_data_V_full_n,
        output_mat_data_V_write => gry2rgb_U0_output_mat_data_V_write);

    mat2strm_U0 : component mat2strm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mat2strm_U0_ap_start,
        ap_done => mat2strm_U0_ap_done,
        ap_continue => mat2strm_U0_ap_continue,
        ap_idle => mat2strm_U0_ap_idle,
        ap_ready => mat2strm_U0_ap_ready,
        IN_size_read => ap_const_lv21_E1000,
        IN_data_V_dout => out_tmp_data_V_dout,
        IN_data_V_empty_n => out_tmp_data_V_empty_n,
        IN_data_V_read => mat2strm_U0_IN_data_V_read,
        OUTPUT_STREAM_TDATA => mat2strm_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => mat2strm_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => mat2strm_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => mat2strm_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => mat2strm_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => mat2strm_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => mat2strm_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => mat2strm_U0_OUTPUT_STREAM_TDEST);

    in_tmp_data_V_U : component fifo_w24_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => strm2mat_U0_OUT_data_V_din,
        if_full_n => in_tmp_data_V_full_n,
        if_write => strm2mat_U0_OUT_data_V_write,
        if_dout => in_tmp_data_V_dout,
        if_empty_n => in_tmp_data_V_empty_n,
        if_read => rgb2gry_U0_input_mat_data_V_read);

    im_1_data_V_U : component fifo_w7_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rgb2gry_U0_output_mat_data_V_din,
        if_full_n => im_1_data_V_full_n,
        if_write => rgb2gry_U0_output_mat_data_V_write,
        if_dout => im_1_data_V_dout,
        if_empty_n => im_1_data_V_empty_n,
        if_read => hls_2DFilter_U0_input_mat_data_V_read);

    im_2_data_V_U : component fifo_w1_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hls_2DFilter_U0_output_mat_data_V_din,
        if_full_n => im_2_data_V_full_n,
        if_write => hls_2DFilter_U0_output_mat_data_V_write,
        if_dout => im_2_data_V_dout,
        if_empty_n => im_2_data_V_empty_n,
        if_read => gry2rgb_U0_input_mat_data_V_read);

    out_tmp_data_V_U : component fifo_w17_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gry2rgb_U0_output_mat_data_V_din,
        if_full_n => out_tmp_data_V_full_n,
        if_write => gry2rgb_U0_output_mat_data_V_write,
        if_dout => out_tmp_data_V_dout,
        if_empty_n => out_tmp_data_V_empty_n,
        if_read => mat2strm_U0_IN_data_V_read);

    start_for_rgb2gryg8j_U : component start_for_rgb2gryg8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_rgb2gry_U0_din,
        if_full_n => start_for_rgb2gry_U0_full_n,
        if_write => strm2mat_U0_start_write,
        if_dout => start_for_rgb2gry_U0_dout,
        if_empty_n => start_for_rgb2gry_U0_empty_n,
        if_read => rgb2gry_U0_ap_ready);

    start_for_hls_2DFhbi_U : component start_for_hls_2DFhbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hls_2DFilter_U0_din,
        if_full_n => start_for_hls_2DFilter_U0_full_n,
        if_write => rgb2gry_U0_start_write,
        if_dout => start_for_hls_2DFilter_U0_dout,
        if_empty_n => start_for_hls_2DFilter_U0_empty_n,
        if_read => hls_2DFilter_U0_ap_ready);

    start_for_gry2rgbibs_U : component start_for_gry2rgbibs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gry2rgb_U0_din,
        if_full_n => start_for_gry2rgb_U0_full_n,
        if_write => hls_2DFilter_U0_start_write,
        if_dout => start_for_gry2rgb_U0_dout,
        if_empty_n => start_for_gry2rgb_U0_empty_n,
        if_read => gry2rgb_U0_ap_ready);

    start_for_mat2strjbC_U : component start_for_mat2strjbC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mat2strm_U0_din,
        if_full_n => start_for_mat2strm_U0_full_n,
        if_write => gry2rgb_U0_start_write,
        if_dout => start_for_mat2strm_U0_dout,
        if_empty_n => start_for_mat2strm_U0_empty_n,
        if_read => mat2strm_U0_ap_ready);




    INPUT_STREAM_TREADY <= strm2mat_U0_INPUT_STREAM_TREADY;
    OUTPUT_STREAM_TDATA <= mat2strm_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= mat2strm_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= mat2strm_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= mat2strm_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= mat2strm_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= mat2strm_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= mat2strm_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= mat2strm_U0_OUTPUT_STREAM_TVALID;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    gry2rgb_U0_ap_continue <= ap_const_logic_1;
    gry2rgb_U0_ap_start <= start_for_gry2rgb_U0_empty_n;
    hls_2DFilter_U0_ap_continue <= ap_const_logic_1;
    hls_2DFilter_U0_ap_start <= start_for_hls_2DFilter_U0_empty_n;
    mat2strm_U0_ap_continue <= ap_const_logic_1;
    mat2strm_U0_ap_start <= start_for_mat2strm_U0_empty_n;
    mat2strm_U0_start_full_n <= ap_const_logic_1;
    mat2strm_U0_start_write <= ap_const_logic_0;
    rgb2gry_U0_ap_continue <= ap_const_logic_1;
    rgb2gry_U0_ap_start <= start_for_rgb2gry_U0_empty_n;
    start_for_gry2rgb_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hls_2DFilter_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_mat2strm_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_rgb2gry_U0_din <= (0=>ap_const_logic_1, others=>'-');
    strm2mat_U0_ap_continue <= ap_const_logic_1;
    strm2mat_U0_ap_start <= ap_const_logic_1;
end behav;
