// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mat2strm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        IN_size_read,
        IN_data_V_dout,
        IN_data_V_empty_n,
        IN_data_V_read,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [20:0] IN_size_read;
input  [16:0] IN_data_V_dout;
input   IN_data_V_empty_n;
output   IN_data_V_read;
output  [23:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
input   OUTPUT_STREAM_TREADY;
output  [2:0] OUTPUT_STREAM_TKEEP;
output  [2:0] OUTPUT_STREAM_TSTRB;
output  [0:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [0:0] OUTPUT_STREAM_TID;
output  [0:0] OUTPUT_STREAM_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg IN_data_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] OUT_V_data_V_1_data_out;
reg    OUT_V_data_V_1_vld_in;
wire    OUT_V_data_V_1_vld_out;
wire    OUT_V_data_V_1_ack_in;
wire    OUT_V_data_V_1_ack_out;
reg   [23:0] OUT_V_data_V_1_payload_A;
reg   [23:0] OUT_V_data_V_1_payload_B;
reg    OUT_V_data_V_1_sel_rd;
reg    OUT_V_data_V_1_sel_wr;
wire    OUT_V_data_V_1_sel;
wire    OUT_V_data_V_1_load_A;
wire    OUT_V_data_V_1_load_B;
reg   [1:0] OUT_V_data_V_1_state;
wire    OUT_V_data_V_1_state_cmp_full;
wire   [2:0] OUT_V_keep_V_1_data_out;
reg    OUT_V_keep_V_1_vld_in;
wire    OUT_V_keep_V_1_vld_out;
wire    OUT_V_keep_V_1_ack_in;
wire    OUT_V_keep_V_1_ack_out;
reg    OUT_V_keep_V_1_sel_rd;
wire    OUT_V_keep_V_1_sel;
reg   [1:0] OUT_V_keep_V_1_state;
wire   [2:0] OUT_V_strb_V_1_data_out;
reg    OUT_V_strb_V_1_vld_in;
wire    OUT_V_strb_V_1_vld_out;
wire    OUT_V_strb_V_1_ack_in;
wire    OUT_V_strb_V_1_ack_out;
reg    OUT_V_strb_V_1_sel_rd;
wire    OUT_V_strb_V_1_sel;
reg   [1:0] OUT_V_strb_V_1_state;
wire   [0:0] OUT_V_user_V_1_data_out;
reg    OUT_V_user_V_1_vld_in;
wire    OUT_V_user_V_1_vld_out;
wire    OUT_V_user_V_1_ack_in;
wire    OUT_V_user_V_1_ack_out;
reg    OUT_V_user_V_1_sel_rd;
wire    OUT_V_user_V_1_sel;
reg   [1:0] OUT_V_user_V_1_state;
wire   [0:0] OUT_V_last_V_1_data_out;
reg    OUT_V_last_V_1_vld_in;
wire    OUT_V_last_V_1_vld_out;
wire    OUT_V_last_V_1_ack_in;
wire    OUT_V_last_V_1_ack_out;
reg    OUT_V_last_V_1_sel_rd;
wire    OUT_V_last_V_1_sel;
reg   [1:0] OUT_V_last_V_1_state;
wire   [0:0] OUT_V_id_V_1_data_out;
reg    OUT_V_id_V_1_vld_in;
wire    OUT_V_id_V_1_vld_out;
wire    OUT_V_id_V_1_ack_in;
wire    OUT_V_id_V_1_ack_out;
reg    OUT_V_id_V_1_sel_rd;
wire    OUT_V_id_V_1_sel;
reg   [1:0] OUT_V_id_V_1_state;
wire   [0:0] OUT_V_dest_V_1_data_out;
reg    OUT_V_dest_V_1_vld_in;
wire    OUT_V_dest_V_1_vld_out;
wire    OUT_V_dest_V_1_ack_in;
wire    OUT_V_dest_V_1_ack_out;
reg    OUT_V_dest_V_1_sel_rd;
wire    OUT_V_dest_V_1_sel;
reg   [1:0] OUT_V_dest_V_1_state;
reg    IN_data_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_118_p2;
reg    OUTPUT_STREAM_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
wire   [19:0] i_2_fu_123_p2;
reg   [19:0] i_2_reg_142;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire  signed [23:0] tmp_data_V_fu_129_p1;
reg   [19:0] i_reg_103;
wire   [20:0] i_cast_fu_114_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 OUT_V_data_V_1_sel_rd = 1'b0;
#0 OUT_V_data_V_1_sel_wr = 1'b0;
#0 OUT_V_data_V_1_state = 2'd0;
#0 OUT_V_keep_V_1_sel_rd = 1'b0;
#0 OUT_V_keep_V_1_state = 2'd0;
#0 OUT_V_strb_V_1_sel_rd = 1'b0;
#0 OUT_V_strb_V_1_state = 2'd0;
#0 OUT_V_user_V_1_sel_rd = 1'b0;
#0 OUT_V_user_V_1_state = 2'd0;
#0 OUT_V_last_V_1_sel_rd = 1'b0;
#0 OUT_V_last_V_1_state = 2'd0;
#0 OUT_V_id_V_1_sel_rd = 1'b0;
#0 OUT_V_id_V_1_state = 2'd0;
#0 OUT_V_dest_V_1_sel_rd = 1'b0;
#0 OUT_V_dest_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_data_V_1_ack_out) & (1'b1 == OUT_V_data_V_1_vld_out))) begin
            OUT_V_data_V_1_sel_rd <= ~OUT_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_data_V_1_ack_in) & (1'b1 == OUT_V_data_V_1_vld_in))) begin
            OUT_V_data_V_1_sel_wr <= ~OUT_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_data_V_1_state) & (1'b0 == OUT_V_data_V_1_vld_in)) | ((2'd3 == OUT_V_data_V_1_state) & (1'b0 == OUT_V_data_V_1_vld_in) & (1'b1 == OUT_V_data_V_1_ack_out)))) begin
            OUT_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_data_V_1_state) & (1'b0 == OUT_V_data_V_1_ack_out)) | ((2'd3 == OUT_V_data_V_1_state) & (1'b0 == OUT_V_data_V_1_ack_out) & (1'b1 == OUT_V_data_V_1_vld_in)))) begin
            OUT_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_data_V_1_vld_in) & (1'b1 == OUT_V_data_V_1_ack_out)) & ~((1'b0 == OUT_V_data_V_1_ack_out) & (1'b1 == OUT_V_data_V_1_vld_in)) & (2'd3 == OUT_V_data_V_1_state)) | ((2'd1 == OUT_V_data_V_1_state) & (1'b1 == OUT_V_data_V_1_ack_out)) | ((2'd2 == OUT_V_data_V_1_state) & (1'b1 == OUT_V_data_V_1_vld_in)))) begin
            OUT_V_data_V_1_state <= 2'd3;
        end else begin
            OUT_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_dest_V_1_ack_out) & (1'b1 == OUT_V_dest_V_1_vld_out))) begin
            OUT_V_dest_V_1_sel_rd <= ~OUT_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_dest_V_1_state) & (1'b0 == OUT_V_dest_V_1_vld_in)) | ((2'd3 == OUT_V_dest_V_1_state) & (1'b0 == OUT_V_dest_V_1_vld_in) & (1'b1 == OUT_V_dest_V_1_ack_out)))) begin
            OUT_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_dest_V_1_state) & (1'b0 == OUT_V_dest_V_1_ack_out)) | ((2'd3 == OUT_V_dest_V_1_state) & (1'b0 == OUT_V_dest_V_1_ack_out) & (1'b1 == OUT_V_dest_V_1_vld_in)))) begin
            OUT_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_dest_V_1_vld_in) & (1'b1 == OUT_V_dest_V_1_ack_out)) & ~((1'b0 == OUT_V_dest_V_1_ack_out) & (1'b1 == OUT_V_dest_V_1_vld_in)) & (2'd3 == OUT_V_dest_V_1_state)) | ((2'd1 == OUT_V_dest_V_1_state) & (1'b1 == OUT_V_dest_V_1_ack_out)) | ((2'd2 == OUT_V_dest_V_1_state) & (1'b1 == OUT_V_dest_V_1_vld_in)))) begin
            OUT_V_dest_V_1_state <= 2'd3;
        end else begin
            OUT_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_id_V_1_ack_out) & (1'b1 == OUT_V_id_V_1_vld_out))) begin
            OUT_V_id_V_1_sel_rd <= ~OUT_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_id_V_1_state) & (1'b0 == OUT_V_id_V_1_vld_in)) | ((2'd3 == OUT_V_id_V_1_state) & (1'b0 == OUT_V_id_V_1_vld_in) & (1'b1 == OUT_V_id_V_1_ack_out)))) begin
            OUT_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_id_V_1_state) & (1'b0 == OUT_V_id_V_1_ack_out)) | ((2'd3 == OUT_V_id_V_1_state) & (1'b0 == OUT_V_id_V_1_ack_out) & (1'b1 == OUT_V_id_V_1_vld_in)))) begin
            OUT_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_id_V_1_vld_in) & (1'b1 == OUT_V_id_V_1_ack_out)) & ~((1'b0 == OUT_V_id_V_1_ack_out) & (1'b1 == OUT_V_id_V_1_vld_in)) & (2'd3 == OUT_V_id_V_1_state)) | ((2'd1 == OUT_V_id_V_1_state) & (1'b1 == OUT_V_id_V_1_ack_out)) | ((2'd2 == OUT_V_id_V_1_state) & (1'b1 == OUT_V_id_V_1_vld_in)))) begin
            OUT_V_id_V_1_state <= 2'd3;
        end else begin
            OUT_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_keep_V_1_ack_out) & (1'b1 == OUT_V_keep_V_1_vld_out))) begin
            OUT_V_keep_V_1_sel_rd <= ~OUT_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_keep_V_1_state) & (1'b0 == OUT_V_keep_V_1_vld_in)) | ((2'd3 == OUT_V_keep_V_1_state) & (1'b0 == OUT_V_keep_V_1_vld_in) & (1'b1 == OUT_V_keep_V_1_ack_out)))) begin
            OUT_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_keep_V_1_state) & (1'b0 == OUT_V_keep_V_1_ack_out)) | ((2'd3 == OUT_V_keep_V_1_state) & (1'b0 == OUT_V_keep_V_1_ack_out) & (1'b1 == OUT_V_keep_V_1_vld_in)))) begin
            OUT_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_keep_V_1_vld_in) & (1'b1 == OUT_V_keep_V_1_ack_out)) & ~((1'b0 == OUT_V_keep_V_1_ack_out) & (1'b1 == OUT_V_keep_V_1_vld_in)) & (2'd3 == OUT_V_keep_V_1_state)) | ((2'd1 == OUT_V_keep_V_1_state) & (1'b1 == OUT_V_keep_V_1_ack_out)) | ((2'd2 == OUT_V_keep_V_1_state) & (1'b1 == OUT_V_keep_V_1_vld_in)))) begin
            OUT_V_keep_V_1_state <= 2'd3;
        end else begin
            OUT_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_last_V_1_ack_out) & (1'b1 == OUT_V_last_V_1_vld_out))) begin
            OUT_V_last_V_1_sel_rd <= ~OUT_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_last_V_1_state) & (1'b0 == OUT_V_last_V_1_vld_in)) | ((2'd3 == OUT_V_last_V_1_state) & (1'b0 == OUT_V_last_V_1_vld_in) & (1'b1 == OUT_V_last_V_1_ack_out)))) begin
            OUT_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_last_V_1_state) & (1'b0 == OUT_V_last_V_1_ack_out)) | ((2'd3 == OUT_V_last_V_1_state) & (1'b0 == OUT_V_last_V_1_ack_out) & (1'b1 == OUT_V_last_V_1_vld_in)))) begin
            OUT_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_last_V_1_vld_in) & (1'b1 == OUT_V_last_V_1_ack_out)) & ~((1'b0 == OUT_V_last_V_1_ack_out) & (1'b1 == OUT_V_last_V_1_vld_in)) & (2'd3 == OUT_V_last_V_1_state)) | ((2'd1 == OUT_V_last_V_1_state) & (1'b1 == OUT_V_last_V_1_ack_out)) | ((2'd2 == OUT_V_last_V_1_state) & (1'b1 == OUT_V_last_V_1_vld_in)))) begin
            OUT_V_last_V_1_state <= 2'd3;
        end else begin
            OUT_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_strb_V_1_ack_out) & (1'b1 == OUT_V_strb_V_1_vld_out))) begin
            OUT_V_strb_V_1_sel_rd <= ~OUT_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_strb_V_1_state) & (1'b0 == OUT_V_strb_V_1_vld_in)) | ((2'd3 == OUT_V_strb_V_1_state) & (1'b0 == OUT_V_strb_V_1_vld_in) & (1'b1 == OUT_V_strb_V_1_ack_out)))) begin
            OUT_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_strb_V_1_state) & (1'b0 == OUT_V_strb_V_1_ack_out)) | ((2'd3 == OUT_V_strb_V_1_state) & (1'b0 == OUT_V_strb_V_1_ack_out) & (1'b1 == OUT_V_strb_V_1_vld_in)))) begin
            OUT_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_strb_V_1_vld_in) & (1'b1 == OUT_V_strb_V_1_ack_out)) & ~((1'b0 == OUT_V_strb_V_1_ack_out) & (1'b1 == OUT_V_strb_V_1_vld_in)) & (2'd3 == OUT_V_strb_V_1_state)) | ((2'd1 == OUT_V_strb_V_1_state) & (1'b1 == OUT_V_strb_V_1_ack_out)) | ((2'd2 == OUT_V_strb_V_1_state) & (1'b1 == OUT_V_strb_V_1_vld_in)))) begin
            OUT_V_strb_V_1_state <= 2'd3;
        end else begin
            OUT_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUT_V_user_V_1_ack_out) & (1'b1 == OUT_V_user_V_1_vld_out))) begin
            OUT_V_user_V_1_sel_rd <= ~OUT_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        OUT_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUT_V_user_V_1_state) & (1'b0 == OUT_V_user_V_1_vld_in)) | ((2'd3 == OUT_V_user_V_1_state) & (1'b0 == OUT_V_user_V_1_vld_in) & (1'b1 == OUT_V_user_V_1_ack_out)))) begin
            OUT_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUT_V_user_V_1_state) & (1'b0 == OUT_V_user_V_1_ack_out)) | ((2'd3 == OUT_V_user_V_1_state) & (1'b0 == OUT_V_user_V_1_ack_out) & (1'b1 == OUT_V_user_V_1_vld_in)))) begin
            OUT_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUT_V_user_V_1_vld_in) & (1'b1 == OUT_V_user_V_1_ack_out)) & ~((1'b0 == OUT_V_user_V_1_ack_out) & (1'b1 == OUT_V_user_V_1_vld_in)) & (2'd3 == OUT_V_user_V_1_state)) | ((2'd1 == OUT_V_user_V_1_state) & (1'b1 == OUT_V_user_V_1_ack_out)) | ((2'd2 == OUT_V_user_V_1_state) & (1'b1 == OUT_V_user_V_1_vld_in)))) begin
            OUT_V_user_V_1_state <= 2'd3;
        end else begin
            OUT_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == OUT_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_103 <= i_2_reg_142;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_103 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUT_V_data_V_1_load_A)) begin
        OUT_V_data_V_1_payload_A <= tmp_data_V_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUT_V_data_V_1_load_B)) begin
        OUT_V_data_V_1_payload_B <= tmp_data_V_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_142 <= i_2_fu_123_p2;
    end
end

always @ (*) begin
    if (((tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_data_V_blk_n = IN_data_V_empty_n;
    end else begin
        IN_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        IN_data_V_read = 1'b1;
    end else begin
        IN_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        OUTPUT_STREAM_TDATA_blk_n = OUT_V_data_V_1_state[1'd1];
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OUT_V_data_V_1_sel)) begin
        OUT_V_data_V_1_data_out = OUT_V_data_V_1_payload_B;
    end else begin
        OUT_V_data_V_1_data_out = OUT_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_data_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_dest_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_id_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_keep_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_last_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_strb_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        OUT_V_user_V_1_vld_in = 1'b1;
    end else begin
        OUT_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | (1'b1 == ap_block_state2_io) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n))) & (tmp_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == OUT_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUTPUT_STREAM_TDATA = OUT_V_data_V_1_data_out;

assign OUTPUT_STREAM_TDEST = OUT_V_dest_V_1_data_out;

assign OUTPUT_STREAM_TID = OUT_V_id_V_1_data_out;

assign OUTPUT_STREAM_TKEEP = OUT_V_keep_V_1_data_out;

assign OUTPUT_STREAM_TLAST = OUT_V_last_V_1_data_out;

assign OUTPUT_STREAM_TSTRB = OUT_V_strb_V_1_data_out;

assign OUTPUT_STREAM_TUSER = OUT_V_user_V_1_data_out;

assign OUTPUT_STREAM_TVALID = OUT_V_dest_V_1_state[1'd0];

assign OUT_V_data_V_1_ack_in = OUT_V_data_V_1_state[1'd1];

assign OUT_V_data_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_data_V_1_load_A = (~OUT_V_data_V_1_sel_wr & OUT_V_data_V_1_state_cmp_full);

assign OUT_V_data_V_1_load_B = (OUT_V_data_V_1_state_cmp_full & OUT_V_data_V_1_sel_wr);

assign OUT_V_data_V_1_sel = OUT_V_data_V_1_sel_rd;

assign OUT_V_data_V_1_state_cmp_full = ((OUT_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUT_V_data_V_1_vld_out = OUT_V_data_V_1_state[1'd0];

assign OUT_V_dest_V_1_ack_in = OUT_V_dest_V_1_state[1'd1];

assign OUT_V_dest_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_dest_V_1_data_out = 1'd0;

assign OUT_V_dest_V_1_sel = OUT_V_dest_V_1_sel_rd;

assign OUT_V_dest_V_1_vld_out = OUT_V_dest_V_1_state[1'd0];

assign OUT_V_id_V_1_ack_in = OUT_V_id_V_1_state[1'd1];

assign OUT_V_id_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_id_V_1_data_out = 1'd0;

assign OUT_V_id_V_1_sel = OUT_V_id_V_1_sel_rd;

assign OUT_V_id_V_1_vld_out = OUT_V_id_V_1_state[1'd0];

assign OUT_V_keep_V_1_ack_in = OUT_V_keep_V_1_state[1'd1];

assign OUT_V_keep_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_keep_V_1_data_out = 3'd0;

assign OUT_V_keep_V_1_sel = OUT_V_keep_V_1_sel_rd;

assign OUT_V_keep_V_1_vld_out = OUT_V_keep_V_1_state[1'd0];

assign OUT_V_last_V_1_ack_in = OUT_V_last_V_1_state[1'd1];

assign OUT_V_last_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_last_V_1_data_out = 1'd0;

assign OUT_V_last_V_1_sel = OUT_V_last_V_1_sel_rd;

assign OUT_V_last_V_1_vld_out = OUT_V_last_V_1_state[1'd0];

assign OUT_V_strb_V_1_ack_in = OUT_V_strb_V_1_state[1'd1];

assign OUT_V_strb_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_strb_V_1_data_out = 3'd0;

assign OUT_V_strb_V_1_sel = OUT_V_strb_V_1_sel_rd;

assign OUT_V_strb_V_1_vld_out = OUT_V_strb_V_1_state[1'd0];

assign OUT_V_user_V_1_ack_in = OUT_V_user_V_1_state[1'd1];

assign OUT_V_user_V_1_ack_out = OUTPUT_STREAM_TREADY;

assign OUT_V_user_V_1_data_out = 1'd0;

assign OUT_V_user_V_1_sel = OUT_V_user_V_1_sel_rd;

assign OUT_V_user_V_1_vld_out = OUT_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == OUT_V_data_V_1_ack_in) | (1'b0 == OUT_V_dest_V_1_ack_in) | (1'b0 == OUT_V_id_V_1_ack_in) | (1'b0 == OUT_V_last_V_1_ack_in) | (1'b0 == OUT_V_user_V_1_ack_in) | (1'b0 == OUT_V_strb_V_1_ack_in) | (1'b0 == OUT_V_keep_V_1_ack_in) | ((tmp_fu_118_p2 == 1'd1) & (1'b0 == IN_data_V_empty_n)));
end

always @ (*) begin
    ap_block_state2_io = ((tmp_fu_118_p2 == 1'd1) & (1'b0 == OUT_V_data_V_1_ack_in));
end

assign i_2_fu_123_p2 = (i_reg_103 + 20'd1);

assign i_cast_fu_114_p1 = i_reg_103;

assign tmp_data_V_fu_129_p1 = $signed(IN_data_V_dout);

assign tmp_fu_118_p2 = (($signed(i_cast_fu_114_p1) < $signed(IN_size_read)) ? 1'b1 : 1'b0);

endmodule //mat2strm
