// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _rgb2gry_HH_
#define _rgb2gry_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct rgb2gry : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > input_mat_data_V_dout;
    sc_in< sc_logic > input_mat_data_V_empty_n;
    sc_out< sc_logic > input_mat_data_V_read;
    sc_out< sc_lv<7> > output_mat_data_V_din;
    sc_in< sc_logic > output_mat_data_V_full_n;
    sc_out< sc_logic > output_mat_data_V_write;


    // Module declarations
    rgb2gry(sc_module_name name);
    SC_HAS_PROCESS(rgb2gry);

    ~rgb2gry();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > input_mat_data_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_147;
    sc_signal< sc_logic > output_mat_data_V_blk_n;
    sc_signal< sc_lv<20> > indvar_flatten_reg_65;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_76_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<20> > indvar_flatten_next_fu_82_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<5> > tmp_fu_88_p4;
    sc_signal< sc_lv<5> > tmp_2_fu_102_p4;
    sc_signal< sc_lv<5> > tmp_3_fu_116_p4;
    sc_signal< sc_lv<6> > tmp_3_cast_fu_98_p1;
    sc_signal< sc_lv<6> > tmp_4_cast_fu_112_p1;
    sc_signal< sc_lv<6> > tmp_6_fu_130_p2;
    sc_signal< sc_lv<7> > tmp_6_cast_fu_136_p1;
    sc_signal< sc_lv<7> > tmp_5_cast_fu_126_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<20> ap_const_lv20_E1000;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten_fu_76_p2();
    void thread_indvar_flatten_next_fu_82_p2();
    void thread_input_mat_data_V_blk_n();
    void thread_input_mat_data_V_read();
    void thread_internal_ap_ready();
    void thread_output_mat_data_V_blk_n();
    void thread_output_mat_data_V_din();
    void thread_output_mat_data_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_2_fu_102_p4();
    void thread_tmp_3_cast_fu_98_p1();
    void thread_tmp_3_fu_116_p4();
    void thread_tmp_4_cast_fu_112_p1();
    void thread_tmp_5_cast_fu_126_p1();
    void thread_tmp_6_cast_fu_136_p1();
    void thread_tmp_6_fu_130_p2();
    void thread_tmp_fu_88_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
