// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _strm2mat_HH_
#define _strm2mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct strm2mat : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > INPUT_STREAM_TDATA;
    sc_in< sc_logic > INPUT_STREAM_TVALID;
    sc_out< sc_logic > INPUT_STREAM_TREADY;
    sc_in< sc_lv<3> > INPUT_STREAM_TKEEP;
    sc_in< sc_lv<3> > INPUT_STREAM_TSTRB;
    sc_in< sc_lv<1> > INPUT_STREAM_TUSER;
    sc_in< sc_lv<1> > INPUT_STREAM_TLAST;
    sc_in< sc_lv<1> > INPUT_STREAM_TID;
    sc_in< sc_lv<1> > INPUT_STREAM_TDEST;
    sc_in< sc_lv<21> > OUT_size_read;
    sc_out< sc_lv<24> > OUT_data_V_din;
    sc_in< sc_logic > OUT_data_V_full_n;
    sc_out< sc_logic > OUT_data_V_write;


    // Module declarations
    strm2mat(sc_module_name name);
    SC_HAS_PROCESS(strm2mat);

    ~strm2mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > IN_V_data_V_0_data_out;
    sc_signal< sc_logic > IN_V_data_V_0_vld_in;
    sc_signal< sc_logic > IN_V_data_V_0_vld_out;
    sc_signal< sc_logic > IN_V_data_V_0_ack_in;
    sc_signal< sc_logic > IN_V_data_V_0_ack_out;
    sc_signal< sc_lv<24> > IN_V_data_V_0_payload_A;
    sc_signal< sc_lv<24> > IN_V_data_V_0_payload_B;
    sc_signal< sc_logic > IN_V_data_V_0_sel_rd;
    sc_signal< sc_logic > IN_V_data_V_0_sel_wr;
    sc_signal< sc_logic > IN_V_data_V_0_sel;
    sc_signal< sc_logic > IN_V_data_V_0_load_A;
    sc_signal< sc_logic > IN_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > IN_V_data_V_0_state;
    sc_signal< sc_logic > IN_V_data_V_0_state_cmp_full;
    sc_signal< sc_logic > IN_V_dest_V_0_vld_in;
    sc_signal< sc_logic > IN_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > IN_V_dest_V_0_state;
    sc_signal< sc_logic > INPUT_STREAM_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_102_p2;
    sc_signal< sc_logic > OUT_data_V_blk_n;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<20> > i_1_fu_107_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<20> > i_reg_87;
    sc_signal< sc_lv<21> > i_cast_fu_98_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<20> ap_const_lv20_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_INPUT_STREAM_TDATA_blk_n();
    void thread_INPUT_STREAM_TREADY();
    void thread_IN_V_data_V_0_ack_in();
    void thread_IN_V_data_V_0_ack_out();
    void thread_IN_V_data_V_0_data_out();
    void thread_IN_V_data_V_0_load_A();
    void thread_IN_V_data_V_0_load_B();
    void thread_IN_V_data_V_0_sel();
    void thread_IN_V_data_V_0_state_cmp_full();
    void thread_IN_V_data_V_0_vld_in();
    void thread_IN_V_data_V_0_vld_out();
    void thread_IN_V_dest_V_0_ack_out();
    void thread_IN_V_dest_V_0_vld_in();
    void thread_OUT_data_V_blk_n();
    void thread_OUT_data_V_din();
    void thread_OUT_data_V_write();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_1_fu_107_p2();
    void thread_i_cast_fu_98_p1();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_fu_102_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
