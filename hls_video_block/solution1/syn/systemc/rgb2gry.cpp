// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "rgb2gry.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic rgb2gry::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic rgb2gry::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> rgb2gry::ap_ST_fsm_state1 = "1";
const sc_lv<3> rgb2gry::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> rgb2gry::ap_ST_fsm_state4 = "100";
const bool rgb2gry::ap_const_boolean_1 = true;
const sc_lv<32> rgb2gry::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> rgb2gry::ap_const_lv32_1 = "1";
const bool rgb2gry::ap_const_boolean_0 = false;
const sc_lv<1> rgb2gry::ap_const_lv1_0 = "0";
const sc_lv<1> rgb2gry::ap_const_lv1_1 = "1";
const sc_lv<20> rgb2gry::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<20> rgb2gry::ap_const_lv20_E1000 = "11100001000000000000";
const sc_lv<20> rgb2gry::ap_const_lv20_1 = "1";
const sc_lv<32> rgb2gry::ap_const_lv32_3 = "11";
const sc_lv<32> rgb2gry::ap_const_lv32_7 = "111";
const sc_lv<32> rgb2gry::ap_const_lv32_B = "1011";
const sc_lv<32> rgb2gry::ap_const_lv32_F = "1111";
const sc_lv<32> rgb2gry::ap_const_lv32_13 = "10011";
const sc_lv<32> rgb2gry::ap_const_lv32_17 = "10111";
const sc_lv<32> rgb2gry::ap_const_lv32_2 = "10";

rgb2gry::rgb2gry(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( input_mat_data_V_empty_n );
    sensitive << ( output_mat_data_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_147 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( input_mat_data_V_empty_n );
    sensitive << ( output_mat_data_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_147 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( input_mat_data_V_empty_n );
    sensitive << ( output_mat_data_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_147 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( input_mat_data_V_empty_n );
    sensitive << ( output_mat_data_V_full_n );
    sensitive << ( exitcond_flatten_reg_147 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_76_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond_flatten_fu_76_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_65 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_indvar_flatten_next_fu_82_p2);
    sensitive << ( indvar_flatten_reg_65 );

    SC_METHOD(thread_input_mat_data_V_blk_n);
    sensitive << ( input_mat_data_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_147 );

    SC_METHOD(thread_input_mat_data_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_147 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_output_mat_data_V_blk_n);
    sensitive << ( output_mat_data_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_147 );

    SC_METHOD(thread_output_mat_data_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_147 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_6_cast_fu_136_p1 );
    sensitive << ( tmp_5_cast_fu_126_p1 );

    SC_METHOD(thread_output_mat_data_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_147 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_2_fu_102_p4);
    sensitive << ( input_mat_data_V_dout );

    SC_METHOD(thread_tmp_3_cast_fu_98_p1);
    sensitive << ( tmp_fu_88_p4 );

    SC_METHOD(thread_tmp_3_fu_116_p4);
    sensitive << ( input_mat_data_V_dout );

    SC_METHOD(thread_tmp_4_cast_fu_112_p1);
    sensitive << ( tmp_2_fu_102_p4 );

    SC_METHOD(thread_tmp_5_cast_fu_126_p1);
    sensitive << ( tmp_3_fu_116_p4 );

    SC_METHOD(thread_tmp_6_cast_fu_136_p1);
    sensitive << ( tmp_6_fu_130_p2 );

    SC_METHOD(thread_tmp_6_fu_130_p2);
    sensitive << ( tmp_3_cast_fu_98_p1 );
    sensitive << ( tmp_4_cast_fu_112_p1 );

    SC_METHOD(thread_tmp_fu_88_p4);
    sensitive << ( input_mat_data_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_flatten_fu_76_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "rgb2gry_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, input_mat_data_V_dout, "(port)input_mat_data_V_dout");
    sc_trace(mVcdFile, input_mat_data_V_empty_n, "(port)input_mat_data_V_empty_n");
    sc_trace(mVcdFile, input_mat_data_V_read, "(port)input_mat_data_V_read");
    sc_trace(mVcdFile, output_mat_data_V_din, "(port)output_mat_data_V_din");
    sc_trace(mVcdFile, output_mat_data_V_full_n, "(port)output_mat_data_V_full_n");
    sc_trace(mVcdFile, output_mat_data_V_write, "(port)output_mat_data_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, input_mat_data_V_blk_n, "input_mat_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_147, "exitcond_flatten_reg_147");
    sc_trace(mVcdFile, output_mat_data_V_blk_n, "output_mat_data_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_65, "indvar_flatten_reg_65");
    sc_trace(mVcdFile, exitcond_flatten_fu_76_p2, "exitcond_flatten_fu_76_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_82_p2, "indvar_flatten_next_fu_82_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_fu_88_p4, "tmp_fu_88_p4");
    sc_trace(mVcdFile, tmp_2_fu_102_p4, "tmp_2_fu_102_p4");
    sc_trace(mVcdFile, tmp_3_fu_116_p4, "tmp_3_fu_116_p4");
    sc_trace(mVcdFile, tmp_3_cast_fu_98_p1, "tmp_3_cast_fu_98_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_112_p1, "tmp_4_cast_fu_112_p1");
    sc_trace(mVcdFile, tmp_6_fu_130_p2, "tmp_6_fu_130_p2");
    sc_trace(mVcdFile, tmp_6_cast_fu_136_p1, "tmp_6_cast_fu_136_p1");
    sc_trace(mVcdFile, tmp_5_cast_fu_126_p1, "tmp_5_cast_fu_126_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

rgb2gry::~rgb2gry() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void rgb2gry::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_76_p2.read()))) {
        indvar_flatten_reg_65 = indvar_flatten_next_fu_82_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        indvar_flatten_reg_65 = ap_const_lv20_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_147 = exitcond_flatten_fu_76_p2.read();
    }
}

void rgb2gry::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void rgb2gry::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void rgb2gry::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void rgb2gry::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rgb2gry::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_mat_data_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_mat_data_V_full_n.read()))));
}

void rgb2gry::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_mat_data_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_mat_data_V_full_n.read()))));
}

void rgb2gry::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, input_mat_data_V_empty_n.read())) || 
  (esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
   esl_seteq<1,1,1>(ap_const_logic_0, output_mat_data_V_full_n.read()))));
}

void rgb2gry::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void rgb2gry::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void rgb2gry::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, input_mat_data_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, output_mat_data_V_full_n.read())));
}

void rgb2gry::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_76_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void rgb2gry::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void rgb2gry::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void rgb2gry::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void rgb2gry::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void rgb2gry::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void rgb2gry::thread_exitcond_flatten_fu_76_p2() {
    exitcond_flatten_fu_76_p2 = (!indvar_flatten_reg_65.read().is_01() || !ap_const_lv20_E1000.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_65.read() == ap_const_lv20_E1000);
}

void rgb2gry::thread_indvar_flatten_next_fu_82_p2() {
    indvar_flatten_next_fu_82_p2 = (!indvar_flatten_reg_65.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(indvar_flatten_reg_65.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void rgb2gry::thread_input_mat_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0))) {
        input_mat_data_V_blk_n = input_mat_data_V_empty_n.read();
    } else {
        input_mat_data_V_blk_n = ap_const_logic_1;
    }
}

void rgb2gry::thread_input_mat_data_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        input_mat_data_V_read = ap_const_logic_1;
    } else {
        input_mat_data_V_read = ap_const_logic_0;
    }
}

void rgb2gry::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void rgb2gry::thread_output_mat_data_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0))) {
        output_mat_data_V_blk_n = output_mat_data_V_full_n.read();
    } else {
        output_mat_data_V_blk_n = ap_const_logic_1;
    }
}

void rgb2gry::thread_output_mat_data_V_din() {
    output_mat_data_V_din = (!tmp_6_cast_fu_136_p1.read().is_01() || !tmp_5_cast_fu_126_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_6_cast_fu_136_p1.read()) + sc_biguint<7>(tmp_5_cast_fu_126_p1.read()));
}

void rgb2gry::thread_output_mat_data_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_147.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        output_mat_data_V_write = ap_const_logic_1;
    } else {
        output_mat_data_V_write = ap_const_logic_0;
    }
}

void rgb2gry::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void rgb2gry::thread_start_out() {
    start_out = real_start.read();
}

void rgb2gry::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void rgb2gry::thread_tmp_2_fu_102_p4() {
    tmp_2_fu_102_p4 = input_mat_data_V_dout.read().range(15, 11);
}

void rgb2gry::thread_tmp_3_cast_fu_98_p1() {
    tmp_3_cast_fu_98_p1 = esl_zext<6,5>(tmp_fu_88_p4.read());
}

void rgb2gry::thread_tmp_3_fu_116_p4() {
    tmp_3_fu_116_p4 = input_mat_data_V_dout.read().range(23, 19);
}

void rgb2gry::thread_tmp_4_cast_fu_112_p1() {
    tmp_4_cast_fu_112_p1 = esl_zext<6,5>(tmp_2_fu_102_p4.read());
}

void rgb2gry::thread_tmp_5_cast_fu_126_p1() {
    tmp_5_cast_fu_126_p1 = esl_zext<7,5>(tmp_3_fu_116_p4.read());
}

void rgb2gry::thread_tmp_6_cast_fu_136_p1() {
    tmp_6_cast_fu_136_p1 = esl_zext<7,6>(tmp_6_fu_130_p2.read());
}

void rgb2gry::thread_tmp_6_fu_130_p2() {
    tmp_6_fu_130_p2 = (!tmp_3_cast_fu_98_p1.read().is_01() || !tmp_4_cast_fu_112_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_3_cast_fu_98_p1.read()) + sc_biguint<6>(tmp_4_cast_fu_112_p1.read()));
}

void rgb2gry::thread_tmp_fu_88_p4() {
    tmp_fu_88_p4 = input_mat_data_V_dout.read().range(7, 3);
}

void rgb2gry::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_76_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_76_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

