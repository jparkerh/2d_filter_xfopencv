-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_2DFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_mat_data_strea_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    input_mat_data_strea_empty_n : IN STD_LOGIC;
    input_mat_data_strea_read : OUT STD_LOGIC;
    output_mat_data_stre_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_mat_data_stre_full_n : IN STD_LOGIC;
    output_mat_data_stre_write : OUT STD_LOGIC );
end;


architecture behav of hls_2DFilter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_7D : STD_LOGIC_VECTOR (9 downto 0) := "0001111101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal input_mat_data_strea_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_mat_data_stre_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal exitcond1_reg_481_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_164 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_1_fu_181_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal row_1_reg_471 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_reg_481_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_481_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_199_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal line_buffer_0_0_va_1_reg_490 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_0_va_1_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_502_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_502_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_502_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_WINDOW_val_1_val_1_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_512 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_1_0_va_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN_WINDOW_val_1_val_2_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_0_2_i_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_0_2_i_reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_2_2_i_fu_320_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_2_2_i_reg_533 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_mag_2_2_2_i_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_mag_2_2_2_i_reg_539 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_i_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal line_buffer_0_0_va_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_0_0_va_ce0 : STD_LOGIC;
    signal line_buffer_0_0_va_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal line_buffer_0_0_va_ce1 : STD_LOGIC;
    signal line_buffer_0_0_va_we1 : STD_LOGIC;
    signal line_buffer_1_0_va_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal line_buffer_1_0_va_ce0 : STD_LOGIC;
    signal line_buffer_1_0_va_ce1 : STD_LOGIC;
    signal line_buffer_1_0_va_we1 : STD_LOGIC;
    signal row_reg_153 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal tmp_7_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal IN_WINDOW_val_val_0_1_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN_WINDOW_val_val_0_s_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN_WINDOW_val_val_2_1_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN_WINDOW_val_val_1_1_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN_WINDOW_val_1_val_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal IN_WINDOW_val_val_2_s_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_0_1_i_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_mag_2_0_1_i_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_mag_2_0_2_i_fu_250_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_286_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_1_1_i_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_1_2_i_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_mag_2_2_i_fu_308_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_cast_fu_349_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_i_i_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_i_i_fu_352_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_i_i_fu_363_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i_cast_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_i2_i_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_i1_i_fu_378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_i3_i_fu_389_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal abs_i_i_cast_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal abs_i3_i_cast_fu_397_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_i_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp4_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hls_2DFilter_lineeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    line_buffer_0_0_va_U : component hls_2DFilter_lineeOg
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_0_0_va_address0,
        ce0 => line_buffer_0_0_va_ce0,
        q0 => line_buffer_0_0_va_q0,
        address1 => line_buffer_0_0_va_1_reg_490,
        ce1 => line_buffer_0_0_va_ce1,
        we1 => line_buffer_0_0_va_we1,
        d1 => line_buffer_1_0_va_q0);

    line_buffer_1_0_va_U : component hls_2DFilter_lineeOg
    generic map (
        DataWidth => 8,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => line_buffer_1_0_va_address0,
        ce0 => line_buffer_1_0_va_ce0,
        q0 => line_buffer_1_0_va_q0,
        address1 => line_buffer_1_0_va_1_reg_496,
        ce1 => line_buffer_1_0_va_ce1,
        we1 => line_buffer_1_0_va_we1,
        d1 => input_mat_data_strea_dout);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond2_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((exitcond1_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond2_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((exitcond2_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_reg_164 <= col_1_fu_199_p2;
            elsif (((exitcond2_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_reg_164 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    row_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_153 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                row_reg_153 <= row_1_reg_471;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                IN_WINDOW_val_1_val_1_reg_507 <= IN_WINDOW_val_1_val_fu_90;
                exitcond1_reg_481 <= exitcond1_fu_193_p2;
                exitcond1_reg_481_pp0_iter1_reg <= exitcond1_reg_481;
                tmp_8_reg_502_pp0_iter1_reg <= tmp_8_reg_502;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_481 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                IN_WINDOW_val_1_val_2_reg_518 <= line_buffer_1_0_va_q0;
                IN_WINDOW_val_1_val_fu_90 <= line_buffer_1_0_va_q0;
                IN_WINDOW_val_val_0_1_fu_74 <= IN_WINDOW_val_val_0_s_fu_78;
                IN_WINDOW_val_val_0_s_fu_78 <= line_buffer_0_0_va_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_481_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                IN_WINDOW_val_val_1_1_fu_86 <= IN_WINDOW_val_1_val_1_reg_507;
                IN_WINDOW_val_val_2_1_fu_82 <= tmp_12_reg_512;
                IN_WINDOW_val_val_2_s_fu_94 <= IN_WINDOW_val_val_2_1_fu_82;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond1_reg_481_pp0_iter2_reg <= exitcond1_reg_481_pp0_iter1_reg;
                exitcond1_reg_481_pp0_iter3_reg <= exitcond1_reg_481_pp0_iter2_reg;
                tmp_8_reg_502_pp0_iter2_reg <= tmp_8_reg_502_pp0_iter1_reg;
                tmp_8_reg_502_pp0_iter3_reg <= tmp_8_reg_502_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                line_buffer_0_0_va_1_reg_490 <= tmp_7_fu_205_p1(11 - 1 downto 0);
                line_buffer_1_0_va_1_reg_496 <= tmp_7_fu_205_p1(11 - 1 downto 0);
                tmp_8_reg_502 <= tmp_8_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_1_reg_471 <= row_1_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_481 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp2_reg_528 <= tmp2_fu_256_p2;
                tmp_12_reg_512 <= input_mat_data_strea_dout;
                x_mag_2_0_2_i_reg_523 <= x_mag_2_0_2_i_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_4_reg_476 <= tmp_4_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_481_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_5_i_reg_545 <= tmp_5_i_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_481_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_mag_2_2_2_i_reg_533 <= x_mag_2_2_2_i_fu_320_p2;
                y_mag_2_2_2_i_reg_539 <= y_mag_2_2_2_i_fu_331_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, exitcond2_fu_175_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
        abs_i3_i_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs_i3_i_fu_389_p3),10));

    abs_i3_i_fu_389_p3 <= 
        tmp_2_i_cast_fu_375_p1 when (abscond_i2_i_fu_384_p2(0) = '1') else 
        neg_i1_i_fu_378_p2;
        abs_i_i_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(abs_i_i_fu_363_p3),10));

    abs_i_i_fu_363_p3 <= 
        tmp_i_cast_fu_349_p1 when (abscond_i_i_fu_358_p2(0) = '1') else 
        neg_i_i_fu_352_p2;
    abscond_i2_i_fu_384_p2 <= "1" when (signed(y_mag_2_2_2_i_reg_539) > signed(ap_const_lv8_0)) else "0";
    abscond_i_i_fu_358_p2 <= "1" when (signed(x_mag_2_2_2_i_reg_533) > signed(ap_const_lv8_0)) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(input_mat_data_strea_empty_n, output_mat_data_stre_full_n, ap_enable_reg_pp0_iter1, exitcond1_reg_481, ap_enable_reg_pp0_iter4, exitcond1_reg_481_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond1_reg_481_pp0_iter3_reg = ap_const_lv1_0) and (output_mat_data_stre_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond1_reg_481 = ap_const_lv1_0) and (input_mat_data_strea_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(input_mat_data_strea_empty_n, output_mat_data_stre_full_n, ap_enable_reg_pp0_iter1, exitcond1_reg_481, ap_enable_reg_pp0_iter4, exitcond1_reg_481_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond1_reg_481_pp0_iter3_reg = ap_const_lv1_0) and (output_mat_data_stre_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond1_reg_481 = ap_const_lv1_0) and (input_mat_data_strea_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(input_mat_data_strea_empty_n, output_mat_data_stre_full_n, ap_enable_reg_pp0_iter1, exitcond1_reg_481, ap_enable_reg_pp0_iter4, exitcond1_reg_481_pp0_iter3_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond1_reg_481_pp0_iter3_reg = ap_const_lv1_0) and (output_mat_data_stre_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond1_reg_481 = ap_const_lv1_0) and (input_mat_data_strea_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(input_mat_data_strea_empty_n, exitcond1_reg_481)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond1_reg_481 = ap_const_lv1_0) and (input_mat_data_strea_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(output_mat_data_stre_full_n, exitcond1_reg_481_pp0_iter3_reg)
    begin
                ap_block_state7_pp0_stage0_iter4 <= ((exitcond1_reg_481_pp0_iter3_reg = ap_const_lv1_0) and (output_mat_data_stre_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond2_fu_175_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond2_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    col_1_fu_199_p2 <= std_logic_vector(unsigned(col_reg_164) + unsigned(ap_const_lv11_1));
    exitcond1_fu_193_p2 <= "1" when (col_reg_164 = ap_const_lv11_500) else "0";
    exitcond2_fu_175_p2 <= "1" when (row_reg_153 = ap_const_lv10_2D0) else "0";

    input_mat_data_strea_blk_n_assign_proc : process(input_mat_data_strea_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_481)
    begin
        if (((exitcond1_reg_481 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_mat_data_strea_blk_n <= input_mat_data_strea_empty_n;
        else 
            input_mat_data_strea_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_mat_data_strea_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_481, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_reg_481 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_mat_data_strea_read <= ap_const_logic_1;
        else 
            input_mat_data_strea_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(exitcond2_fu_175_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond2_fu_175_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_0_va_address0 <= tmp_7_fu_205_p1(11 - 1 downto 0);

    line_buffer_0_0_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_0_0_va_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_0_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_0_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_0_0_va_ce1 <= ap_const_logic_1;
        else 
            line_buffer_0_0_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_0_0_va_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_481, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_reg_481 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_0_0_va_we1 <= ap_const_logic_1;
        else 
            line_buffer_0_0_va_we1 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_0_va_address0 <= tmp_7_fu_205_p1(11 - 1 downto 0);

    line_buffer_1_0_va_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_0_va_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_0_va_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_0_va_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_0_va_ce1 <= ap_const_logic_1;
        else 
            line_buffer_1_0_va_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_1_0_va_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_481, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_reg_481 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            line_buffer_1_0_va_we1 <= ap_const_logic_1;
        else 
            line_buffer_1_0_va_we1 <= ap_const_logic_0;
        end if; 
    end process;

    neg_i1_i_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_2_i_cast_fu_375_p1));
    neg_i_i_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_i_cast_fu_349_p1));

    output_mat_data_stre_blk_n_assign_proc : process(output_mat_data_stre_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, exitcond1_reg_481_pp0_iter3_reg)
    begin
        if (((exitcond1_reg_481_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_mat_data_stre_blk_n <= output_mat_data_stre_full_n;
        else 
            output_mat_data_stre_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_mat_data_stre_din <= 
        ap_const_lv8_FF when (tmp_2_fu_417_p2(0) = '1') else 
        ap_const_lv8_0;

    output_mat_data_stre_write_assign_proc : process(ap_enable_reg_pp0_iter4, exitcond1_reg_481_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond1_reg_481_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_mat_data_stre_write <= ap_const_logic_1;
        else 
            output_mat_data_stre_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    row_1_fu_181_p2 <= std_logic_vector(unsigned(row_reg_153) + unsigned(ap_const_lv10_1));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_256_p2 <= std_logic_vector(unsigned(y_mag_2_0_2_i_fu_250_p2) + unsigned(input_mat_data_strea_dout));
    tmp3_fu_325_p2 <= std_logic_vector(unsigned(IN_WINDOW_val_val_2_s_fu_94) + unsigned(tmp_10_fu_314_p2));
    tmp4_fu_413_p2 <= (tmp_8_reg_502_pp0_iter3_reg and tmp_5_i_reg_545);
    tmp_10_fu_314_p2 <= std_logic_vector(shift_left(unsigned(IN_WINDOW_val_val_2_1_fu_82),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_12_0_1_i_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_fu_226_p2));
    tmp_1_fu_286_p2 <= std_logic_vector(shift_left(unsigned(IN_WINDOW_val_val_1_1_fu_86),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_2_fu_417_p2 <= (tmp_4_reg_476 and tmp4_fu_413_p2);
        tmp_2_i_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_mag_2_2_2_i_reg_539),9));

    tmp_3_fu_297_p2 <= std_logic_vector(shift_left(unsigned(IN_WINDOW_val_1_val_2_reg_518),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_4_fu_187_p2 <= "0" when (row_reg_153 = ap_const_lv10_0) else "1";
    tmp_4_i_fu_401_p2 <= std_logic_vector(signed(abs_i_i_cast_fu_371_p1) + signed(abs_i3_i_cast_fu_397_p1));
    tmp_5_i_fu_407_p2 <= "1" when (signed(tmp_4_i_fu_401_p2) > signed(ap_const_lv10_7D)) else "0";
    tmp_7_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_164),64));
    tmp_8_fu_211_p2 <= "0" when (col_reg_164 = ap_const_lv11_0) else "1";
    tmp_fu_226_p2 <= std_logic_vector(shift_left(unsigned(IN_WINDOW_val_val_0_s_fu_78),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
        tmp_i_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_mag_2_2_2_i_reg_533),9));

    x_mag_2_0_2_i_fu_244_p2 <= std_logic_vector(unsigned(line_buffer_0_0_va_q0) - unsigned(IN_WINDOW_val_val_0_1_fu_74));
    x_mag_2_1_1_i_fu_292_p2 <= std_logic_vector(unsigned(x_mag_2_0_2_i_reg_523) - unsigned(tmp_1_fu_286_p2));
    x_mag_2_1_2_i_fu_302_p2 <= std_logic_vector(unsigned(tmp_3_fu_297_p2) + unsigned(x_mag_2_1_1_i_fu_292_p2));
    x_mag_2_2_2_i_fu_320_p2 <= std_logic_vector(unsigned(x_mag_2_2_i_fu_308_p2) + unsigned(tmp_12_reg_512));
    x_mag_2_2_i_fu_308_p2 <= std_logic_vector(unsigned(x_mag_2_1_2_i_fu_302_p2) - unsigned(IN_WINDOW_val_val_2_s_fu_94));
    y_mag_2_0_1_i_fu_238_p2 <= std_logic_vector(unsigned(tmp_12_0_1_i_fu_232_p2) - unsigned(IN_WINDOW_val_val_0_1_fu_74));
    y_mag_2_0_2_i_fu_250_p2 <= std_logic_vector(unsigned(y_mag_2_0_1_i_fu_238_p2) - unsigned(line_buffer_0_0_va_q0));
    y_mag_2_2_2_i_fu_331_p2 <= std_logic_vector(unsigned(tmp2_reg_528) + unsigned(tmp3_fu_325_p2));
end behav;
