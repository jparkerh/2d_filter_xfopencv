// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_2DFilter (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_mat_data_strea_dout,
        input_mat_data_strea_empty_n,
        input_mat_data_strea_read,
        output_mat_data_stre_din,
        output_mat_data_stre_full_n,
        output_mat_data_stre_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] input_mat_data_strea_dout;
input   input_mat_data_strea_empty_n;
output   input_mat_data_strea_read;
output  [7:0] output_mat_data_stre_din;
input   output_mat_data_stre_full_n;
output   output_mat_data_stre_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg input_mat_data_strea_read;
reg output_mat_data_stre_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    input_mat_data_strea_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond1_reg_481;
reg    output_mat_data_stre_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] exitcond1_reg_481_pp0_iter3_reg;
reg   [10:0] col_reg_164;
wire   [0:0] exitcond2_fu_175_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] row_1_fu_181_p2;
reg   [9:0] row_1_reg_471;
wire   [0:0] tmp_4_fu_187_p2;
reg   [0:0] tmp_4_reg_476;
wire   [0:0] exitcond1_fu_193_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_reg_481_pp0_iter1_reg;
reg   [0:0] exitcond1_reg_481_pp0_iter2_reg;
wire   [10:0] col_1_fu_199_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [10:0] line_buffer_0_0_va_1_reg_490;
reg   [10:0] line_buffer_1_0_va_1_reg_496;
wire   [0:0] tmp_8_fu_211_p2;
reg   [0:0] tmp_8_reg_502;
reg   [0:0] tmp_8_reg_502_pp0_iter1_reg;
reg   [0:0] tmp_8_reg_502_pp0_iter2_reg;
reg   [0:0] tmp_8_reg_502_pp0_iter3_reg;
reg   [7:0] IN_WINDOW_val_1_val_1_reg_507;
reg   [7:0] tmp_12_reg_512;
wire   [7:0] line_buffer_1_0_va_q0;
reg   [7:0] IN_WINDOW_val_1_val_2_reg_518;
wire   [7:0] x_mag_2_0_2_i_fu_244_p2;
reg   [7:0] x_mag_2_0_2_i_reg_523;
wire   [7:0] tmp2_fu_256_p2;
reg   [7:0] tmp2_reg_528;
wire  signed [7:0] x_mag_2_2_2_i_fu_320_p2;
reg  signed [7:0] x_mag_2_2_2_i_reg_533;
wire  signed [7:0] y_mag_2_2_2_i_fu_331_p2;
reg  signed [7:0] y_mag_2_2_2_i_reg_539;
wire   [0:0] tmp_5_i_fu_407_p2;
reg   [0:0] tmp_5_i_reg_545;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state4;
reg    ap_enable_reg_pp0_iter3;
wire   [10:0] line_buffer_0_0_va_address0;
reg    line_buffer_0_0_va_ce0;
wire   [7:0] line_buffer_0_0_va_q0;
reg    line_buffer_0_0_va_ce1;
reg    line_buffer_0_0_va_we1;
wire   [10:0] line_buffer_1_0_va_address0;
reg    line_buffer_1_0_va_ce0;
reg    line_buffer_1_0_va_ce1;
reg    line_buffer_1_0_va_we1;
reg   [9:0] row_reg_153;
wire    ap_CS_fsm_state8;
reg    ap_block_state1;
wire   [63:0] tmp_7_fu_205_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] IN_WINDOW_val_val_0_1_fu_74;
reg   [7:0] IN_WINDOW_val_val_0_s_fu_78;
reg   [7:0] IN_WINDOW_val_val_2_1_fu_82;
reg   [7:0] IN_WINDOW_val_val_1_1_fu_86;
reg   [7:0] IN_WINDOW_val_1_val_fu_90;
reg   [7:0] IN_WINDOW_val_val_2_s_fu_94;
wire   [7:0] tmp_fu_226_p2;
wire   [7:0] tmp_12_0_1_i_fu_232_p2;
wire   [7:0] y_mag_2_0_1_i_fu_238_p2;
wire   [7:0] y_mag_2_0_2_i_fu_250_p2;
wire   [7:0] tmp_1_fu_286_p2;
wire   [7:0] tmp_3_fu_297_p2;
wire   [7:0] x_mag_2_1_1_i_fu_292_p2;
wire   [7:0] x_mag_2_1_2_i_fu_302_p2;
wire   [7:0] x_mag_2_2_i_fu_308_p2;
wire   [7:0] tmp_10_fu_314_p2;
wire   [7:0] tmp3_fu_325_p2;
wire  signed [8:0] tmp_i_cast_fu_349_p1;
wire   [0:0] abscond_i_i_fu_358_p2;
wire   [8:0] neg_i_i_fu_352_p2;
wire   [8:0] abs_i_i_fu_363_p3;
wire  signed [8:0] tmp_2_i_cast_fu_375_p1;
wire   [0:0] abscond_i2_i_fu_384_p2;
wire   [8:0] neg_i1_i_fu_378_p2;
wire   [8:0] abs_i3_i_fu_389_p3;
wire  signed [9:0] abs_i_i_cast_fu_371_p1;
wire  signed [9:0] abs_i3_i_cast_fu_397_p1;
wire   [9:0] tmp_4_i_fu_401_p2;
wire   [0:0] tmp4_fu_413_p2;
wire   [0:0] tmp_2_fu_417_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

hls_2DFilter_lineeOg #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buffer_0_0_va_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_0_0_va_address0),
    .ce0(line_buffer_0_0_va_ce0),
    .q0(line_buffer_0_0_va_q0),
    .address1(line_buffer_0_0_va_1_reg_490),
    .ce1(line_buffer_0_0_va_ce1),
    .we1(line_buffer_0_0_va_we1),
    .d1(line_buffer_1_0_va_q0)
);

hls_2DFilter_lineeOg #(
    .DataWidth( 8 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
line_buffer_1_0_va_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buffer_1_0_va_address0),
    .ce0(line_buffer_1_0_va_ce0),
    .q0(line_buffer_1_0_va_q0),
    .address1(line_buffer_1_0_va_1_reg_496),
    .ce1(line_buffer_1_0_va_ce1),
    .we1(line_buffer_1_0_va_we1),
    .d1(input_mat_data_strea_dout)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond2_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((exitcond1_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond2_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state4)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((exitcond2_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_reg_164 <= col_1_fu_199_p2;
    end else if (((exitcond2_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_reg_164 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_153 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        row_reg_153 <= row_1_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_WINDOW_val_1_val_1_reg_507 <= IN_WINDOW_val_1_val_fu_90;
        exitcond1_reg_481 <= exitcond1_fu_193_p2;
        exitcond1_reg_481_pp0_iter1_reg <= exitcond1_reg_481;
        tmp_8_reg_502_pp0_iter1_reg <= tmp_8_reg_502;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_481 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_WINDOW_val_1_val_2_reg_518 <= line_buffer_1_0_va_q0;
        IN_WINDOW_val_1_val_fu_90 <= line_buffer_1_0_va_q0;
        IN_WINDOW_val_val_0_1_fu_74 <= IN_WINDOW_val_val_0_s_fu_78;
        IN_WINDOW_val_val_0_s_fu_78 <= line_buffer_0_0_va_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_481_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        IN_WINDOW_val_val_1_1_fu_86 <= IN_WINDOW_val_1_val_1_reg_507;
        IN_WINDOW_val_val_2_1_fu_82 <= tmp_12_reg_512;
        IN_WINDOW_val_val_2_s_fu_94 <= IN_WINDOW_val_val_2_1_fu_82;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond1_reg_481_pp0_iter2_reg <= exitcond1_reg_481_pp0_iter1_reg;
        exitcond1_reg_481_pp0_iter3_reg <= exitcond1_reg_481_pp0_iter2_reg;
        tmp_8_reg_502_pp0_iter2_reg <= tmp_8_reg_502_pp0_iter1_reg;
        tmp_8_reg_502_pp0_iter3_reg <= tmp_8_reg_502_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_0_0_va_1_reg_490 <= tmp_7_fu_205_p1;
        line_buffer_1_0_va_1_reg_496 <= tmp_7_fu_205_p1;
        tmp_8_reg_502 <= tmp_8_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_1_reg_471 <= row_1_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_481 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_reg_528 <= tmp2_fu_256_p2;
        tmp_12_reg_512 <= input_mat_data_strea_dout;
        x_mag_2_0_2_i_reg_523 <= x_mag_2_0_2_i_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_476 <= tmp_4_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_481_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_5_i_reg_545 <= tmp_5_i_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_481_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_mag_2_2_2_i_reg_533 <= x_mag_2_2_2_i_fu_320_p2;
        y_mag_2_2_2_i_reg_539 <= y_mag_2_2_2_i_fu_331_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_481 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_mat_data_strea_blk_n = input_mat_data_strea_empty_n;
    end else begin
        input_mat_data_strea_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_481 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_mat_data_strea_read = 1'b1;
    end else begin
        input_mat_data_strea_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_0_0_va_ce0 = 1'b1;
    end else begin
        line_buffer_0_0_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_0_0_va_ce1 = 1'b1;
    end else begin
        line_buffer_0_0_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_481 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_0_0_va_we1 = 1'b1;
    end else begin
        line_buffer_0_0_va_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_1_0_va_ce0 = 1'b1;
    end else begin
        line_buffer_1_0_va_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_1_0_va_ce1 = 1'b1;
    end else begin
        line_buffer_1_0_va_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_481 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buffer_1_0_va_we1 = 1'b1;
    end else begin
        line_buffer_1_0_va_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_481_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_mat_data_stre_blk_n = output_mat_data_stre_full_n;
    end else begin
        output_mat_data_stre_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond1_reg_481_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_mat_data_stre_write = 1'b1;
    end else begin
        output_mat_data_stre_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_i3_i_cast_fu_397_p1 = $signed(abs_i3_i_fu_389_p3);

assign abs_i3_i_fu_389_p3 = ((abscond_i2_i_fu_384_p2[0:0] === 1'b1) ? tmp_2_i_cast_fu_375_p1 : neg_i1_i_fu_378_p2);

assign abs_i_i_cast_fu_371_p1 = $signed(abs_i_i_fu_363_p3);

assign abs_i_i_fu_363_p3 = ((abscond_i_i_fu_358_p2[0:0] === 1'b1) ? tmp_i_cast_fu_349_p1 : neg_i_i_fu_352_p2);

assign abscond_i2_i_fu_384_p2 = (($signed(y_mag_2_2_2_i_reg_539) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign abscond_i_i_fu_358_p2 = (($signed(x_mag_2_2_2_i_reg_533) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond1_reg_481_pp0_iter3_reg == 1'd0) & (output_mat_data_stre_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond1_reg_481 == 1'd0) & (input_mat_data_strea_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond1_reg_481_pp0_iter3_reg == 1'd0) & (output_mat_data_stre_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond1_reg_481 == 1'd0) & (input_mat_data_strea_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond1_reg_481_pp0_iter3_reg == 1'd0) & (output_mat_data_stre_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((exitcond1_reg_481 == 1'd0) & (input_mat_data_strea_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((exitcond1_reg_481 == 1'd0) & (input_mat_data_strea_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((exitcond1_reg_481_pp0_iter3_reg == 1'd0) & (output_mat_data_stre_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign col_1_fu_199_p2 = (col_reg_164 + 11'd1);

assign exitcond1_fu_193_p2 = ((col_reg_164 == 11'd1280) ? 1'b1 : 1'b0);

assign exitcond2_fu_175_p2 = ((row_reg_153 == 10'd720) ? 1'b1 : 1'b0);

assign line_buffer_0_0_va_address0 = tmp_7_fu_205_p1;

assign line_buffer_1_0_va_address0 = tmp_7_fu_205_p1;

assign neg_i1_i_fu_378_p2 = ($signed(9'd0) - $signed(tmp_2_i_cast_fu_375_p1));

assign neg_i_i_fu_352_p2 = ($signed(9'd0) - $signed(tmp_i_cast_fu_349_p1));

assign output_mat_data_stre_din = ((tmp_2_fu_417_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign row_1_fu_181_p2 = (row_reg_153 + 10'd1);

assign start_out = real_start;

assign tmp2_fu_256_p2 = (y_mag_2_0_2_i_fu_250_p2 + input_mat_data_strea_dout);

assign tmp3_fu_325_p2 = (IN_WINDOW_val_val_2_s_fu_94 + tmp_10_fu_314_p2);

assign tmp4_fu_413_p2 = (tmp_8_reg_502_pp0_iter3_reg & tmp_5_i_reg_545);

assign tmp_10_fu_314_p2 = IN_WINDOW_val_val_2_1_fu_82 << 8'd1;

assign tmp_12_0_1_i_fu_232_p2 = (8'd0 - tmp_fu_226_p2);

assign tmp_1_fu_286_p2 = IN_WINDOW_val_val_1_1_fu_86 << 8'd1;

assign tmp_2_fu_417_p2 = (tmp_4_reg_476 & tmp4_fu_413_p2);

assign tmp_2_i_cast_fu_375_p1 = y_mag_2_2_2_i_reg_539;

assign tmp_3_fu_297_p2 = IN_WINDOW_val_1_val_2_reg_518 << 8'd1;

assign tmp_4_fu_187_p2 = ((row_reg_153 != 10'd0) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_401_p2 = ($signed(abs_i_i_cast_fu_371_p1) + $signed(abs_i3_i_cast_fu_397_p1));

assign tmp_5_i_fu_407_p2 = (($signed(tmp_4_i_fu_401_p2) > $signed(10'd125)) ? 1'b1 : 1'b0);

assign tmp_7_fu_205_p1 = col_reg_164;

assign tmp_8_fu_211_p2 = ((col_reg_164 != 11'd0) ? 1'b1 : 1'b0);

assign tmp_fu_226_p2 = IN_WINDOW_val_val_0_s_fu_78 << 8'd1;

assign tmp_i_cast_fu_349_p1 = x_mag_2_2_2_i_reg_533;

assign x_mag_2_0_2_i_fu_244_p2 = (line_buffer_0_0_va_q0 - IN_WINDOW_val_val_0_1_fu_74);

assign x_mag_2_1_1_i_fu_292_p2 = (x_mag_2_0_2_i_reg_523 - tmp_1_fu_286_p2);

assign x_mag_2_1_2_i_fu_302_p2 = (tmp_3_fu_297_p2 + x_mag_2_1_1_i_fu_292_p2);

assign x_mag_2_2_2_i_fu_320_p2 = (x_mag_2_2_i_fu_308_p2 + tmp_12_reg_512);

assign x_mag_2_2_i_fu_308_p2 = (x_mag_2_1_2_i_fu_302_p2 - IN_WINDOW_val_val_2_s_fu_94);

assign y_mag_2_0_1_i_fu_238_p2 = (tmp_12_0_1_i_fu_232_p2 - IN_WINDOW_val_val_0_1_fu_74);

assign y_mag_2_0_2_i_fu_250_p2 = (y_mag_2_0_1_i_fu_238_p2 - line_buffer_0_0_va_q0);

assign y_mag_2_2_2_i_fu_331_p2 = (tmp2_reg_528 + tmp3_fu_325_p2);

endmodule //hls_2DFilter
